{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js6/blob_to_buffer.js","js6/consts.js","js6/game.js","js6/map.js","js6/view.js","libs/svg.js/svg.js","node_modules/events/events.js","node_modules/seedrandom/lib/xor128.js","node_modules/underscore/underscore.js","test/example.js","test/game_test.js","test/main.js","test/map_test.js","test/validators.js","test/view_test.js"],"names":[],"mappings":"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AC,CAAC;AAC1B,cAAI,CAAC,IAAI,CAAC,EAAC,KAAK,EAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;AACnC,gBAAM;AAAA,AACR,aAAK,CAAC,CAAC,IAAI;AACT,cAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AAC5B,gBAAM,CAAC,IAAI,CAAC,EAAC,KAAK,EAAC,MAAM,EAAC,CAAC,CAAC;AAC5B,gBAAM;AAAA,AACR,aAAK,CAAC,CAAC,KAAK;AACV,cAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;AAC1B,cAAI,CAAC,IAAI,CAAC,EAAC,KAAK,EAAC,MAAM,EAAC,CAAC,CAAC;AAC1B,gBAAM;AAAA,OACP;KACF;;;SA/CkB,IAAI;;;qBAAJ,IAAI;;AAkDzB,IAAM,MAAM,GAAG,CACbt8IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","file":"test.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = function blobToBuffer(blob, cb) {\n  if(blob == undefined) {\n    return cb(new Uint8Array())\n  }\n  const fileReader = new FileReader();\n  fileReader.onloadend  = function(event) { \n    const uint8ArrayNew = new Uint8Array(event.target.result);\n    cb(uint8ArrayNew)\n  }\n  fileReader.readAsArrayBuffer(blob);\n}\n","var D_EAST  = 0;\nvar D_SOUTH = 1;\nvar D_WEST  = 2;\nvar D_NORTH = 3;\nvar D_OTHER = 4;\nvar D_OP_MASK = 2;\n\nvar BT_EMPTY = 0;\nvar BT_SNAKE = 1;\nexports.D = {\n  EAST   : 0,\n  SOUTH  : 1,\n  WEST   : 2,\n  NORTH  : 3,\n  OTHER  : 4,\n  OTHER_T: 6,\n  OP_MASK: 2,\n};\nexports.B = {\n  EMPTY: 0,\n  SNAKE: 1,\n  FOOD : 2,\n  BLOCK: 3,\n};\nexports.H = {\n  applyDirection({x,y},d){\n    switch(d){\n      case D_NORTH: y-=1; break;\n      case D_SOUTH: y+=1; break;\n      case D_WEST: x-=1; break;\n      case D_EAST: x+=1; break;\n      default: break;\n    }\n    return {x,y};\n  },\n  cloneBox(b){\n    return [b[0],$.extend({},b[1])];\n  }\n};\n","const {D,B,H} = require('consts');\nconst {EventEmitter} = require('events');\nconst xor128 = require('seedrandom/lib/xor128');\nconst _ = require(\"underscore\");\nconst blobToBuffer = require('blob_to_buffer')\nmodule.exports = class Game extends EventEmitter{\n  constructor(json){\n    super();\n    if(json.version != 1)\n      throw \"wrong version\";\n    this.json = json;\n    const user2index = new Map();\n    const random = xor128(\"\", {state: json.seed});\n    _.each(json.snakes, (snake, index) => {\n      if(snake){\n        user2index.set(snake.name, index);\n      }\n    });\n    this.cache = {\n      user2index,\n      random,\n      //TODO\n      food: 0,\n    };\n  }\n  tick(){\n    const _this = this;\n    var json = this.json;\n    json.snakes.forEach(function(snake){\n      if(snake === undefined){\n        return;\n      }\n      if(--snake.tick !== 0){\n        return;\n      }\n      snake.tick = 1; //TODO\n      var p1 = snake.head;\n      var b1 = _this.getBox(snake.head);\n      if(b1[1].h == D.OTHER){\n        return;\n      }\n      var p2 = H.applyDirection(p1,b1[1].h);\n      var b2 = _this.getBox(p2);\n      switch(b2[0]){\n      case B.FOOD:\n        snake.remain += b2[1].q;\n        _this.setBox(p2,[ B.EMPTY, {} ])\n        //TODO\n        if(_this.cache.food>=0) {\n          _this.setBox(_this.randomFreeLocation(), [ B.FOOD, {q: 1} ]);\n        } else {\n          _this.cache.food++;\n        }\n      case B.EMPTY:\n        _this.setBox(p2,[ B.SNAKE, {\n          h:b1[1].h,\n          t:b1[1].h ^ D.OP_MASK,\n          s:snake.index\n        }])\n        snake.head = p2;\n        if(snake.remain > 0){\n          snake.remain--;\n          snake.length++;\n          return;\n        }\n        p1 = snake.tail;\n        b1 = _this.getBox(p1);\n        p2 = H.applyDirection(p1, b1[1].h);\n        b2 = _this.getBox(p2);\n        snake.tail = p2;\n        _this.setBox(p1,[ B.EMPTY, {}]);\n        break;\n      case B.BLOCK:\n      case B.SNAKE:\n        destroySnake(_this,snake);\n        const {x, y} = _this.randomFreeLocation();\n        _this.join({x, y, name: snake.name, remain: 3});\n        break;\n      }\n    })\n  }\n  randomFreeLocation() {\n    while(true) {\n      const r = randomRange(this.cache.random, this.json.width * this.json.height);\n      if(this.json.grid[r][0] == B.EMPTY) { return {x: r % this.json.width, y: (r/this.json.width)|0 } }\n    }\n  }\n  setSeed(seed) {\n    this.cache.random = xor128(seed, {state: true});\n  }\n  handleCommand2(cmd) {\n    const c = cmd[cmd.command];\n    switch(cmd.command) {\n      case \"tickCommand\":\n        if(c.randomSeed.length > 0){\n          this.setSeed(c.randomSeed);\n        }\n        this.tick();\n        break;\n      case \"idCommand\":\n        if(c.oldId == \"\" && c.newId != \"\") {\n          const {x, y} = this.randomFreeLocation();\n          this.join({x, y, name: c.newId, remain: 3});\n        } else if (c.oldId != \"\" && c.newId == \"\") {\n          var snake = this.json.snakes[this.cache.user2index.get(c.oldId)]\n          if(snake == undefined){\n            throw \"snake not exist\";\n          }\n          destroySnake(this,snake);\n        } else {\n          throw \"unknown error\";\n        }\n        break;\n      case \"writerCommand\":\n        const dir = c.command[0];\n        if(dir >= 4) {\n          throw \"unknown dir\";\n        }\n        var json = game.json;\n        var snake = json.snakes[this.cache.user2index.get(c.id)];\n        var box1 = game.getBox(snake.head);\n        if(box1[1].t == dir){\n          throw \"move oppo\";\n        }\n\n        box1[1].h = dir;\n    }\n  }\n\n  handleCommands(cmds){\n    cmds.forEach((cmd) => {\n      try{\n        handlers[cmd[0]](cmd[1],this);\n      }catch(e){\n        console.error(\"illegal command: \"+JSON.stringify(cmd));\n        console.error(e);\n      }\n    });\n  }\n  getBox({x,y}){\n    var index = y*this.json.width+x;\n    return this.json.grid[index];\n  }\n  getSnakeSize(){\n    return this.cache.user2index.size;\n  }\n  setSnake(index,snake){\n    const oldSnake = this.json.snakes[index];\n    if(this.json.snakes[index] != undefined){\n      this.cache.user2index.delete(oldSnake.name);\n    }\n    if(snake != undefined){\n      this.cache.user2index.set(snake.name, index);\n    }\n    this.json.snakes[index]=snake;\n  }\n  join(data) {\n    var {x,y} = data;\n    var box = this.getBox({x,y});\n    var json = this.json;\n\n    if(box[0] != B.EMPTY){\n      throw \"box taken\";\n    }\n    var index = findNextEmpty(json.snakes);\n\n    var snake={\n      age: 0,\n      index,\n      head: {x,y},\n      length: 1,\n      name: data.name,\n      remain: data.remain,\n      tail: {x,y},\n      tick: 1,\n      pretty: data.pretty\n    };\n    this.setSnake(index,snake);\n\n    this.setBox({x,y},[ B.SNAKE, {\n      h:D.OTHER,\n      s:snake.index,\n      t:D.OTHER_T,\n    }]);\n    //TODO\n    if(this.cache.food>=0) {\n      this.setBox(this.randomFreeLocation(), [ B.FOOD, {q: 1} ]);\n    } else {\n      this.cache.food++;\n    }\n  }\n  setBox({x,y},b2){\n    var index = y*this.json.width+x;\n    var b1 = this.json.grid[index];\n    this.json.grid[index] = b2;\n    this.emit(\"box\",{x,y},b1,b2);\n  }\n};\nvar handlers = {\n  tick(data,game){\n    game.tick();\n  },\n  join(data,game){\n    game.join(data);\n  },\n  direction(data,game){\n    var json = game.json;\n    var snake = json.snakes[data.s];\n    var box1 = game.getBox(snake.head);\n    if(box1[1].t == data.d){\n      throw \"move oppo\";\n    }\n\n    box1[1].h = data.d;\n  },\n  food(data,game){\n    var b1 = game.getBox(data);\n    if(b1[0] != B.EMPTY){\n      throw \"box taken\";\n    }\n    game.setBox(data,[ B.FOOD, {\n      q: data.q\n    }]);\n  },\n  leave(data,game){\n    var snake = game.json.snakes[data.s]\n    if(snake == undefined){\n      throw \"snake not exist\";\n    }\n    destroySnake(game,snake);\n  }\n};\nfunction findNextEmpty(list){\n  var t=0;\n  while(list[t] != undefined){\n    t++;\n  }\n  return t;\n};\nfunction destroySnake(game,snake){\n  var p1 = snake.head;\n  var b1 = game.getBox(snake.head);\n  while(b1[0] == B.SNAKE && b1[1].s == snake.index){\n    game.setBox(p1,[ B.EMPTY,{}]);\n    p1 = H.applyDirection(p1, b1[1].t);\n    b1 = game.getBox(p1);\n  }\n  game.cache.food--;\n  game.setSnake(snake.index,undefined);\n}\n\nfunction randomRange(rand, range) {\n  const max = ((4294967296 / range) | 0) * range;\n  while(true) {\n    const next = rand.int32()+2147483648;\n    if(next < max) { return next % range; }\n  }\n  \n}\n","var {B} = require('consts');\n\nmodule.exports = function(param){\n  var size=param.width * param.height;\n  var grid = [];\n  for(var t=0;t<size;t++){\n    grid[t]=[B.EMPTY,{}];\n  }\n  for(var t=0;t<param.width;t++) {\n    grid[t] = [B.BLOCK, {}]\n    grid[size-1-t] = [B.BLOCK, {}]\n  }\n  for(var t=0;t<param.height;t++) {\n    grid[t*param.width] = [B.BLOCK, {}]\n    grid[size-1-t*param.width] = [B.BLOCK, {}]\n  }\n\n\n  var game = {\n    version:1,\n    config: {\n      startRemain: 5,\n    },\n    seed: {\n      x: 1,\n      y: 2,\n      z: 3,\n      w: 4,\n    },\n    width: param.width,\n    height: param.height,\n    grid: grid,\n    snakes: [],\n    tick: 0,\n  };\n  return {game};\n};\n","var {B} = require('consts');\nvar SVG = require('svg.js/svg');\n//view listens game\nexport default class View{\n  constructor(el,game){\n    this.svg=SVG(el);\n    this.main = this.svg.group();\n    this.main.scale(10);\n    this.game=game;\n    this.grid = [];\n    this.init();\n    // this.symbols = [];\n    // this.symbols[B.EMPTY] = this.svg.symbol()\n    // this.symbols[B.SNAKE] = this.svg.symbol()\n    $(window).on(\"resize\", (e) => {\n      this.svg.size(window.width(),window.height());\n    })\n    game.on('box',(p,b1,b2) => {\n      this.setBox(p,b1,b2);\n    });\n  }\n  init(){\n    for(var t1 = 0;t1 < this.game.json.height;t1++){\n      this.grid[t1] = [];\n      for(var t2 = 0;t2 < this.game.json.width;t2++){\n        var group = this.main.group();\n        group.translate(t2,t1);\n        this.grid[t1*this.game.json.width+t2] = group;\n        this.setBox({x:t2, y:t1},undefined,this.game.json.grid[t1*this.game.json.width+t2]);\n      }\n    }\n  }\n  setBox(p,b1,b2){\n    var vbox = this.grid[p.y*this.game.json.width+p.x];\n    vbox.children().forEach((e) => e.remove())\n    switch(b2[0]){\n    case B.EMPTY:break;\n    case B.SNAKE:\n      var rect = vbox.rect(1,1);\n      rect.fill({color:colors[b2[1].s]});\n      break;\n    case B.FOOD:\n      var circle = vbox.circle(1);\n      circle.fill({color:\"#f00\"});\n      break;\n    case B.BLOCK:\n      var rect = vbox.rect(1,1);\n      rect.fill({color:\"#aaa\"});\n      break;\n    }\n  }\n}\n\nconst colors = [\n  \"#000\",\n  \"#00f\",\n  \"#0f0\",\n  \"#f442d9\",\n  \"#db7f00\",\n  \"#019ec1\",\n]\n","/*!\n* svg.js - A lightweight library for manipulating and animating SVG.\n* @version 2.2.1\n* http://www.svgjs.com\n*\n* @copyright Wout Fierens <wout@impinc.co.uk>\n* @license MIT\n*\n* BUILT: Wed Nov 18 2015 14:42:33 GMT+0100 (Mitteleuropäische Zeit)\n*/;\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof exports === 'object') {\n    module.exports = root.document ? factory(root, root.document) : function(w){ return factory(w, w.document) };\n  } else {\n    root.SVG = factory(root, root.document);\n  }\n}(typeof window !== \"undefined\" ? window : this, function(window, document) {\n\n// The main wrapping element\nvar SVG = this.SVG = function(element) {\n  if (SVG.supported) {\n    element = new SVG.Doc(element)\n\n    if (!SVG.parser)\n      SVG.prepare(element)\n\n    return element\n  }\n}\n\n// Default namespaces\nSVG.ns    = 'http://www.w3.org/2000/svg'\nSVG.xmlns = 'http://www.w3.org/2000/xmlns/'\nSVG.xlink = 'http://www.w3.org/1999/xlink'\nSVG.svgjs = 'http://svgjs.com/svgjs'\n\n// Svg support test\nSVG.supported = (function() {\n  return !! document.createElementNS &&\n         !! document.createElementNS(SVG.ns,'svg').createSVGRect\n})()\n\n// Don't bother to continue if SVG is not supported\nif (!SVG.supported) return false\n\n// Element id sequence\nSVG.did  = 1000\n\n// Get next named element id\nSVG.eid = function(name) {\n  return 'Svgjs' + capitalize(name) + (SVG.did++)\n}\n\n// Method for element creation\nSVG.create = function(name) {\n  // create element\n  var element = document.createElementNS(this.ns, name)\n\n  // apply unique id\n  element.setAttribute('id', this.eid(name))\n\n  return element\n}\n\n// Method for extending objects\nSVG.extend = function() {\n  var modules, methods, key, i\n\n  // Get list of modules\n  modules = [].slice.call(arguments)\n\n  // Get object with extensions\n  methods = modules.pop()\n\n  for (i = modules.length - 1; i >= 0; i--)\n    if (modules[i])\n      for (key in methods)\n        modules[i].prototype[key] = methods[key]\n\n  // Make sure SVG.Set inherits any newly added methods\n  if (SVG.Set && SVG.Set.inherit)\n    SVG.Set.inherit()\n}\n\n// Invent new element\nSVG.invent = function(config) {\n  // Create element initializer\n  var initializer = typeof config.create == 'function' ?\n    config.create :\n    function() {\n      this.constructor.call(this, SVG.create(config.create))\n    }\n\n  // Inherit prototype\n  if (config.inherit)\n    initializer.prototype = new config.inherit\n\n  // Extend with methods\n  if (config.extend)\n    SVG.extend(initializer, config.extend)\n\n  // Attach construct method to parent\n  if (config.construct)\n    SVG.extend(config.parent || SVG.Container, config.construct)\n\n  return initializer\n}\n\n// Adopt existing svg elements\nSVG.adopt = function(node) {\n  // make sure a node isn't already adopted\n  if (node.instance) return node.instance\n\n  // initialize variables\n  var element\n\n  // adopt with element-specific settings\n  if (node.nodeName == 'svg')\n    element = node.parentNode instanceof SVGElement ? new SVG.Nested : new SVG.Doc\n  else if (node.nodeName == 'linearGradient')\n    element = new SVG.Gradient('linear')\n  else if (node.nodeName == 'radialGradient')\n    element = new SVG.Gradient('radial')\n  else if (SVG[capitalize(node.nodeName)])\n    element = new SVG[capitalize(node.nodeName)]\n  else\n    element = new SVG.Element(node)\n\n  // ensure references\n  element.type  = node.nodeName\n  element.node  = node\n  node.instance = element\n\n  // SVG.Class specific preparations\n  if (element instanceof SVG.Doc)\n    element.namespace().defs()\n\n  // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\n  element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {})\n\n  return element\n}\n\n// Initialize parsing element\nSVG.prepare = function(element) {\n  // Select document body and create invisible svg element\n  var body = document.getElementsByTagName('body')[0]\n    , draw = (body ? new SVG.Doc(body) : element.nested()).size(2, 0)\n    , path = SVG.create('path')\n\n  // Insert parsers\n  draw.node.appendChild(path)\n\n  // Create parser object\n  SVG.parser = {\n    body: body || element.parent()\n  , draw: draw.style('opacity:0;position:fixed;left:100%;top:100%;overflow:hidden')\n  , poly: draw.polyline().node\n  , path: path\n  }\n}\n\n// Storage for regular expressions\nSVG.regex = {\n  // Parse unit value\n  unit:             /^(-?[\\d\\.]+)([a-z%]{0,2})$/\n\n  // Parse hex value\n, hex:              /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\n\n  // Parse rgb value\n, rgb:              /rgb\\((\\d+),(\\d+),(\\d+)\\)/\n\n  // Parse reference id\n, reference:        /#([a-z0-9\\-_]+)/i\n\n  // Parse matrix wrapper\n, matrix:           /matrix\\(|\\)/g\n\n  // Elements of a matrix\n, matrixElements:   /,*\\s+|,/\n\n  // Whitespace\n, whitespace:       /\\s/g\n\n  // Test hex value\n, isHex:            /^#[a-f0-9]{3,6}$/i\n\n  // Test rgb value\n, isRgb:            /^rgb\\(/\n\n  // Test css declaration\n, isCss:            /[^:]+:[^;]+;?/\n\n  // Test for blank string\n, isBlank:          /^(\\s+)?$/\n\n  // Test for numeric string\n, isNumber:         /^-?[\\d\\.]+$/\n\n  // Test for percent value\n, isPercent:        /^-?[\\d\\.]+%$/\n\n  // Test for image url\n, isImage:          /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i\n\n  // The following regex are used to parse the d attribute of a path\n\n  // Replaces all negative exponents\n, negExp:           /e\\-/gi\n\n  // Replaces all comma\n, comma:            /,/g\n\n  // Replaces all hyphens\n, hyphen:           /\\-/g\n\n  // Replaces and tests for all path letters\n, pathLetters:      /[MLHVCSQTAZ]/gi\n\n  // yes we need this one, too\n, isPathLetter:     /[MLHVCSQTAZ]/i\n\n  // split at whitespaces\n, whitespaces:      /\\s+/\n\n  // matches X\n, X:                /X/g\n}\nSVG.utils = {\n    // Map function\n    map: function(array, block) {\n    var i\n      , il = array.length\n      , result = []\n\n    for (i = 0; i < il; i++)\n      result.push(block(array[i]))\n\n    return result\n  }\n\n  // Degrees to radians\n, radians: function(d) {\n    return d % 360 * Math.PI / 180\n  }\n  // Radians to degrees\n, degrees: function(r) {\n    return r * 180 / Math.PI % 360\n  }\n, filterSVGElements: function(p) {\n    return [].filter.call(p, function(el){ return el instanceof SVGElement })\n  }\n\n}\n\nSVG.defaults = {\n  // Default attribute values\n  attrs: {\n    // fill and stroke\n    'fill-opacity':     1\n  , 'stroke-opacity':   1\n  , 'stroke-width':     0\n  , 'stroke-linejoin':  'miter'\n  , 'stroke-linecap':   'butt'\n  , fill:               '#000000'\n  , stroke:             '#000000'\n  , opacity:            1\n    // position\n  , x:                  0\n  , y:                  0\n  , cx:                 0\n  , cy:                 0\n    // size\n  , width:              0\n  , height:             0\n    // radius\n  , r:                  0\n  , rx:                 0\n  , ry:                 0\n    // gradient\n  , offset:             0\n  , 'stop-opacity':     1\n  , 'stop-color':       '#000000'\n    // text\n  , 'font-size':        16\n  , 'font-family':      'Helvetica, Arial, sans-serif'\n  , 'text-anchor':      'start'\n  }\n\n}\n// Module for color convertions\nSVG.Color = function(color) {\n  var match\n\n  // initialize defaults\n  this.r = 0\n  this.g = 0\n  this.b = 0\n\n  // parse color\n  if (typeof color === 'string') {\n    if (SVG.regex.isRgb.test(color)) {\n      // get rgb values\n      match = SVG.regex.rgb.exec(color.replace(/\\s/g,''))\n\n      // parse numeric values\n      this.r = parseInt(match[1])\n      this.g = parseInt(match[2])\n      this.b = parseInt(match[3])\n\n    } else if (SVG.regex.isHex.test(color)) {\n      // get hex values\n      match = SVG.regex.hex.exec(fullHex(color))\n\n      // parse numeric values\n      this.r = parseInt(match[1], 16)\n      this.g = parseInt(match[2], 16)\n      this.b = parseInt(match[3], 16)\n\n    }\n\n  } else if (typeof color === 'object') {\n    this.r = color.r\n    this.g = color.g\n    this.b = color.b\n\n  }\n\n}\n\nSVG.extend(SVG.Color, {\n  // Default to hex conversion\n  toString: function() {\n    return this.toHex()\n  }\n  // Build hex value\n, toHex: function() {\n    return '#'\n      + compToHex(this.r)\n      + compToHex(this.g)\n      + compToHex(this.b)\n  }\n  // Build rgb value\n, toRgb: function() {\n    return 'rgb(' + [this.r, this.g, this.b].join() + ')'\n  }\n  // Calculate true brightness\n, brightness: function() {\n    return (this.r / 255 * 0.30)\n         + (this.g / 255 * 0.59)\n         + (this.b / 255 * 0.11)\n  }\n  // Make color morphable\n, morph: function(color) {\n    this.destination = new SVG.Color(color)\n\n    return this\n  }\n  // Get morphed color at given position\n, at: function(pos) {\n    // make sure a destination is defined\n    if (!this.destination) return this\n\n    // normalise pos\n    pos = pos < 0 ? 0 : pos > 1 ? 1 : pos\n\n    // generate morphed color\n    return new SVG.Color({\n      r: ~~(this.r + (this.destination.r - this.r) * pos)\n    , g: ~~(this.g + (this.destination.g - this.g) * pos)\n    , b: ~~(this.b + (this.destination.b - this.b) * pos)\n    })\n  }\n\n})\n\n// Testers\n\n// Test if given value is a color string\nSVG.Color.test = function(color) {\n  color += ''\n  return SVG.regex.isHex.test(color)\n      || SVG.regex.isRgb.test(color)\n}\n\n// Test if given value is a rgb object\nSVG.Color.isRgb = function(color) {\n  return color && typeof color.r == 'number'\n               && typeof color.g == 'number'\n               && typeof color.b == 'number'\n}\n\n// Test if given value is a color\nSVG.Color.isColor = function(color) {\n  return SVG.Color.isRgb(color) || SVG.Color.test(color)\n}\n// Module for array conversion\nSVG.Array = function(array, fallback) {\n  array = (array || []).valueOf()\n\n  // if array is empty and fallback is provided, use fallback\n  if (array.length == 0 && fallback)\n    array = fallback.valueOf()\n\n  // parse array\n  this.value = this.parse(array)\n}\n\nSVG.extend(SVG.Array, {\n  // Make array morphable\n  morph: function(array) {\n    this.destination = this.parse(array)\n\n    // normalize length of arrays\n    if (this.value.length != this.destination.length) {\n      var lastValue       = this.value[this.value.length - 1]\n        , lastDestination = this.destination[this.destination.length - 1]\n\n      while(this.value.length > this.destination.length)\n        this.destination.push(lastDestination)\n      while(this.value.length < this.destination.length)\n        this.value.push(lastValue)\n    }\n\n    return this\n  }\n  // Clean up any duplicate points\n, settle: function() {\n    // find all unique values\n    for (var i = 0, il = this.value.length, seen = []; i < il; i++)\n      if (seen.indexOf(this.value[i]) == -1)\n        seen.push(this.value[i])\n\n    // set new value\n    return this.value = seen\n  }\n  // Get morphed array at given position\n, at: function(pos) {\n    // make sure a destination is defined\n    if (!this.destination) return this\n\n    // generate morphed array\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\n      array.push(this.value[i] + (this.destination[i] - this.value[i]) * pos)\n\n    return new SVG.Array(array)\n  }\n  // Convert array to string\n, toString: function() {\n    return this.value.join(' ')\n  }\n  // Real value\n, valueOf: function() {\n    return this.value\n  }\n  // Parse whitespace separated string\n, parse: function(array) {\n    array = array.valueOf()\n\n    // if already is an array, no need to parse it\n    if (Array.isArray(array)) return array\n\n    return this.split(array)\n  }\n  // Strip unnecessary whitespace\n, split: function(string) {\n    return string.trim().split(/\\s+/)\n  }\n  // Reverse array\n, reverse: function() {\n    this.value.reverse()\n\n    return this\n  }\n\n})\n// Poly points array\nSVG.PointArray = function(array, fallback) {\n  this.constructor.call(this, array, fallback || [[0,0]])\n}\n\n// Inherit from SVG.Array\nSVG.PointArray.prototype = new SVG.Array\n\nSVG.extend(SVG.PointArray, {\n  // Convert array to string\n  toString: function() {\n    // convert to a poly point string\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\n      array.push(this.value[i].join(','))\n\n    return array.join(' ')\n  }\n  // Convert array to line object\n, toLine: function() {\n    return {\n      x1: this.value[0][0]\n    , y1: this.value[0][1]\n    , x2: this.value[1][0]\n    , y2: this.value[1][1]\n    }\n  }\n  // Get morphed array at given position\n, at: function(pos) {\n    // make sure a destination is defined\n    if (!this.destination) return this\n\n    // generate morphed point string\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\n      array.push([\n        this.value[i][0] + (this.destination[i][0] - this.value[i][0]) * pos\n      , this.value[i][1] + (this.destination[i][1] - this.value[i][1]) * pos\n      ])\n\n    return new SVG.PointArray(array)\n  }\n  // Parse point string\n, parse: function(array) {\n    array = array.valueOf()\n\n    // if already is an array, no need to parse it\n    if (Array.isArray(array)) return array\n\n    // split points\n    array = this.split(array)\n\n    // parse points\n    for (var i = 0, il = array.length, p, points = []; i < il; i++) {\n      p = array[i].split(',')\n      points.push([parseFloat(p[0]), parseFloat(p[1])])\n    }\n\n    return points\n  }\n  // Move point string\n, move: function(x, y) {\n    var box = this.bbox()\n\n    // get relative offset\n    x -= box.x\n    y -= box.y\n\n    // move every point\n    if (!isNaN(x) && !isNaN(y))\n      for (var i = this.value.length - 1; i >= 0; i--)\n        this.value[i] = [this.value[i][0] + x, this.value[i][1] + y]\n\n    return this\n  }\n  // Resize poly string\n, size: function(width, height) {\n    var i, box = this.bbox()\n\n    // recalculate position of all points according to new size\n    for (i = this.value.length - 1; i >= 0; i--) {\n      this.value[i][0] = ((this.value[i][0] - box.x) * width)  / box.width  + box.x\n      this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\n    }\n\n    return this\n  }\n  // Get bounding box of points\n, bbox: function() {\n    SVG.parser.poly.setAttribute('points', this.toString())\n\n    return SVG.parser.poly.getBBox()\n  }\n\n})\n// Path points array\nSVG.PathArray = function(array, fallback) {\n  this.constructor.call(this, array, fallback || [['M', 0, 0]])\n}\n\n// Inherit from SVG.Array\nSVG.PathArray.prototype = new SVG.Array\n\nSVG.extend(SVG.PathArray, {\n  // Convert array to string\n  toString: function() {\n    return arrayToString(this.value)\n  }\n  // Move path string\n, move: function(x, y) {\n    // get bounding box of current situation\n    var box = this.bbox()\n\n    // get relative offset\n    x -= box.x\n    y -= box.y\n\n    if (!isNaN(x) && !isNaN(y)) {\n      // move every point\n      for (var l, i = this.value.length - 1; i >= 0; i--) {\n        l = this.value[i][0]\n\n        if (l == 'M' || l == 'L' || l == 'T')  {\n          this.value[i][1] += x\n          this.value[i][2] += y\n\n        } else if (l == 'H')  {\n          this.value[i][1] += x\n\n        } else if (l == 'V')  {\n          this.value[i][1] += y\n\n        } else if (l == 'C' || l == 'S' || l == 'Q')  {\n          this.value[i][1] += x\n          this.value[i][2] += y\n          this.value[i][3] += x\n          this.value[i][4] += y\n\n          if (l == 'C')  {\n            this.value[i][5] += x\n            this.value[i][6] += y\n          }\n\n        } else if (l == 'A')  {\n          this.value[i][6] += x\n          this.value[i][7] += y\n        }\n\n      }\n    }\n\n    return this\n  }\n  // Resize path string\n, size: function(width, height) {\n    // get bounding box of current situation\n    var i, l, box = this.bbox()\n\n    // recalculate position of all points according to new size\n    for (i = this.value.length - 1; i >= 0; i--) {\n      l = this.value[i][0]\n\n      if (l == 'M' || l == 'L' || l == 'T')  {\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\n\n      } else if (l == 'H')  {\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\n\n      } else if (l == 'V')  {\n        this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\n\n      } else if (l == 'C' || l == 'S' || l == 'Q')  {\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\n        this.value[i][3] = ((this.value[i][3] - box.x) * width)  / box.width  + box.x\n        this.value[i][4] = ((this.value[i][4] - box.y) * height) / box.height + box.y\n\n        if (l == 'C')  {\n          this.value[i][5] = ((this.value[i][5] - box.x) * width)  / box.width  + box.x\n          this.value[i][6] = ((this.value[i][6] - box.y) * height) / box.height + box.y\n        }\n\n      } else if (l == 'A')  {\n        // resize radii\n        this.value[i][1] = (this.value[i][1] * width)  / box.width\n        this.value[i][2] = (this.value[i][2] * height) / box.height\n\n        // move position values\n        this.value[i][6] = ((this.value[i][6] - box.x) * width)  / box.width  + box.x\n        this.value[i][7] = ((this.value[i][7] - box.y) * height) / box.height + box.y\n      }\n\n    }\n\n    return this\n  }\n  // Absolutize and parse path to array\n, parse: function(array) {\n    // if it's already a patharray, no need to parse it\n    if (array instanceof SVG.PathArray) return array.valueOf()\n\n    // prepare for parsing\n    var i, x0, y0, s, seg, arr\n      , x = 0\n      , y = 0\n      , paramCnt = { 'M':2, 'L':2, 'H':1, 'V':1, 'C':6, 'S':4, 'Q':4, 'T':2, 'A':7 }\n\n    if(typeof array == 'string'){\n\n      array = array\n        .replace(SVG.regex.negExp, 'X')         // replace all negative exponents with certain char\n        .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers\n        .replace(SVG.regex.hyphen, ' -')        // add space before hyphen\n        .replace(SVG.regex.comma, ' ')          // unify all spaces\n        .replace(SVG.regex.X, 'e-')             // add back the expoent\n        .trim()                                 // trim\n        .split(SVG.regex.whitespaces)           // split into array\n\n    }else{\n      array = array.reduce(function(prev, curr){\n        return [].concat.apply(prev, curr)\n      }, [])\n    }\n\n    // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\n\n    var arr = []\n\n    do{\n\n      // Test if we have a path letter\n      if(SVG.regex.isPathLetter.test(array[0])){\n        s = array[0]\n        array.shift()\n      // If last letter was a move command and we got no new, it defaults to [L]ine\n      }else if(s.toUpperCase() == 'M'){\n        s = 'L'\n      }\n\n      // add path letter as first element\n      seg = [s.toUpperCase()]\n\n      // push all necessary parameters to segment\n      for(i = 0; i < paramCnt[seg[0]]; ++i){\n        seg.push(parseFloat(array.shift()))\n      }\n\n      // upper case\n      if(s == seg[0]){\n\n        if(s == 'M' || s == 'L' || s == 'C' || s == 'Q'){\n          x = seg[paramCnt[seg[0]]-1]\n          y = seg[paramCnt[seg[0]]]\n        }else if(s == 'V'){\n          y = seg[1]\n        }else if(s == 'H'){\n          x = seg[1]\n        }else if(s == 'A'){\n          x = seg[6]\n          y = seg[7]\n        }\n\n      // lower case\n      }else{\n\n        // convert relative to absolute values\n        if(s == 'm' || s == 'l' || s == 'c' || s == 's' || s == 'q' || s == 't'){\n\n          seg[1] += x\n          seg[2] += y\n\n          if(seg[3] != null){\n            seg[3] += x\n            seg[4] += y\n          }\n\n          if(seg[5] != null){\n            seg[5] += x\n            seg[6] += y\n          }\n\n          // move pointer\n          x = seg[paramCnt[seg[0]]-1]\n          y = seg[paramCnt[seg[0]]]\n\n        }else if(s == 'v'){\n          seg[1] += y\n          y = seg[1]\n        }else if(s == 'h'){\n          seg[1] += x\n          x = seg[1]\n        }else if(s == 'a'){\n          seg[6] += x\n          seg[7] += y\n          x = seg[6]\n          y = seg[7]\n        }\n\n      }\n\n      if(seg[0] == 'M'){\n        x0 = x\n        y0 = y\n      }\n\n      if(seg[0] == 'Z'){\n        x = x0\n        y = y0\n      }\n\n      arr.push(seg)\n\n    }while(array.length)\n\n    return arr\n\n  }\n  // Get bounding box of path\n, bbox: function() {\n    SVG.parser.path.setAttribute('d', this.toString())\n\n    return SVG.parser.path.getBBox()\n  }\n\n})\n// Module for unit convertions\nSVG.Number = SVG.invent({\n  // Initialize\n  create: function(value, unit) {\n    // initialize defaults\n    this.value = 0\n    this.unit  = unit || ''\n\n    // parse value\n    if (typeof value === 'number') {\n      // ensure a valid numeric value\n      this.value = isNaN(value) ? 0 : !isFinite(value) ? (value < 0 ? -3.4e+38 : +3.4e+38) : value\n\n    } else if (typeof value === 'string') {\n      unit = value.match(SVG.regex.unit)\n\n      if (unit) {\n        // make value numeric\n        this.value = parseFloat(unit[1])\n\n        // normalize\n        if (unit[2] == '%')\n          this.value /= 100\n        else if (unit[2] == 's')\n          this.value *= 1000\n\n        // store unit\n        this.unit = unit[2]\n      }\n\n    } else {\n      if (value instanceof SVG.Number) {\n        this.value = value.valueOf()\n        this.unit  = value.unit\n      }\n    }\n\n  }\n  // Add methods\n, extend: {\n    // Stringalize\n    toString: function() {\n      return (\n        this.unit == '%' ?\n          ~~(this.value * 1e8) / 1e6:\n        this.unit == 's' ?\n          this.value / 1e3 :\n          this.value\n      ) + this.unit\n    }\n  , // Convert to primitive\n    valueOf: function() {\n      return this.value\n    }\n    // Add number\n  , plus: function(number) {\n      return new SVG.Number(this + new SVG.Number(number), this.unit)\n    }\n    // Subtract number\n  , minus: function(number) {\n      return this.plus(-new SVG.Number(number))\n    }\n    // Multiply number\n  , times: function(number) {\n      return new SVG.Number(this * new SVG.Number(number), this.unit)\n    }\n    // Divide number\n  , divide: function(number) {\n      return new SVG.Number(this / new SVG.Number(number), this.unit)\n    }\n    // Convert to different unit\n  , to: function(unit) {\n      var number = new SVG.Number(this)\n\n      if (typeof unit === 'string')\n        number.unit = unit\n\n      return number\n    }\n    // Make number morphable\n  , morph: function(number) {\n      this.destination = new SVG.Number(number)\n\n      return this\n    }\n    // Get morphed number at given position\n  , at: function(pos) {\n      // Make sure a destination is defined\n      if (!this.destination) return this\n\n      // Generate new morphed number\n      return new SVG.Number(this.destination)\n          .minus(this)\n          .times(pos)\n          .plus(this)\n    }\n\n  }\n})\n\nSVG.ViewBox = function(element) {\n  var x, y, width, height\n    , wm   = 1 // width multiplier\n    , hm   = 1 // height multiplier\n    , box  = element.bbox()\n    , view = (element.attr('viewBox') || '').match(/-?[\\d\\.]+/g)\n    , we   = element\n    , he   = element\n\n  // get dimensions of current node\n  width  = new SVG.Number(element.width())\n  height = new SVG.Number(element.height())\n\n  // find nearest non-percentual dimensions\n  while (width.unit == '%') {\n    wm *= width.value\n    width = new SVG.Number(we instanceof SVG.Doc ? we.parent().offsetWidth : we.parent().width())\n    we = we.parent()\n  }\n  while (height.unit == '%') {\n    hm *= height.value\n    height = new SVG.Number(he instanceof SVG.Doc ? he.parent().offsetHeight : he.parent().height())\n    he = he.parent()\n  }\n\n  // ensure defaults\n  this.x      = box.x\n  this.y      = box.y\n  this.width  = width  * wm\n  this.height = height * hm\n  this.zoom   = 1\n\n  if (view) {\n    // get width and height from viewbox\n    x      = parseFloat(view[0])\n    y      = parseFloat(view[1])\n    width  = parseFloat(view[2])\n    height = parseFloat(view[3])\n\n    // calculate zoom accoring to viewbox\n    this.zoom = ((this.width / this.height) > (width / height)) ?\n      this.height / height :\n      this.width  / width\n\n    // calculate real pixel dimensions on parent SVG.Doc element\n    this.x      = x\n    this.y      = y\n    this.width  = width\n    this.height = height\n\n  }\n\n}\n\n//\nSVG.extend(SVG.ViewBox, {\n  // Parse viewbox to string\n  toString: function() {\n    return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height\n  }\n\n})\n\nSVG.Element = SVG.invent({\n  // Initialize node\n  create: function(node) {\n    // make stroke value accessible dynamically\n    this._stroke = SVG.defaults.attrs.stroke\n\n    // initialize data object\n    this.dom = {}\n\n    // create circular reference\n    if (this.node = node) {\n      this.type = node.nodeName\n      this.node.instance = this\n\n      // store current attribute value\n      this._stroke = node.getAttribute('stroke') || this._stroke\n    }\n  }\n\n  // Add class methods\n, extend: {\n    // Move over x-axis\n    x: function(x) {\n      return this.attr('x', x)\n    }\n    // Move over y-axis\n  , y: function(y) {\n      return this.attr('y', y)\n    }\n    // Move by center over x-axis\n  , cx: function(x) {\n      return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2)\n    }\n    // Move by center over y-axis\n  , cy: function(y) {\n      return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2)\n    }\n    // Move element to given x and y values\n  , move: function(x, y) {\n      return this.x(x).y(y)\n    }\n    // Move element by its center\n  , center: function(x, y) {\n      return this.cx(x).cy(y)\n    }\n    // Set width of element\n  , width: function(width) {\n      return this.attr('width', width)\n    }\n    // Set height of element\n  , height: function(height) {\n      return this.attr('height', height)\n    }\n    // Set element size to given width and height\n  , size: function(width, height) {\n      var p = proportionalSize(this.bbox(), width, height)\n\n      return this\n        .width(new SVG.Number(p.width))\n        .height(new SVG.Number(p.height))\n    }\n    // Clone element\n  , clone: function() {\n      // clone element and assign new id\n      var clone = assignNewId(this.node.cloneNode(true))\n\n      // insert the clone after myself\n      this.after(clone)\n\n      return clone\n    }\n    // Remove element\n  , remove: function() {\n      if (this.parent())\n        this.parent().removeElement(this)\n\n      return this\n    }\n    // Replace element\n  , replace: function(element) {\n      this.after(element).remove()\n\n      return element\n    }\n    // Add element to given container and return self\n  , addTo: function(parent) {\n      return parent.put(this)\n    }\n    // Add element to given container and return container\n  , putIn: function(parent) {\n      return parent.add(this)\n    }\n    // Get / set id\n  , id: function(id) {\n      return this.attr('id', id)\n    }\n    // Checks whether the given point inside the bounding box of the element\n  , inside: function(x, y) {\n      var box = this.bbox()\n\n      return x > box.x\n          && y > box.y\n          && x < box.x + box.width\n          && y < box.y + box.height\n    }\n    // Show element\n  , show: function() {\n      return this.style('display', '')\n    }\n    // Hide element\n  , hide: function() {\n      return this.style('display', 'none')\n    }\n    // Is element visible?\n  , visible: function() {\n      return this.style('display') != 'none'\n    }\n    // Return id on string conversion\n  , toString: function() {\n      return this.attr('id')\n    }\n    // Return array of classes on the node\n  , classes: function() {\n      var attr = this.attr('class')\n\n      return attr == null ? [] : attr.trim().split(/\\s+/)\n    }\n    // Return true if class exists on the node, false otherwise\n  , hasClass: function(name) {\n      return this.classes().indexOf(name) != -1\n    }\n    // Add class to the node\n  , addClass: function(name) {\n      if (!this.hasClass(name)) {\n        var array = this.classes()\n        array.push(name)\n        this.attr('class', array.join(' '))\n      }\n\n      return this\n    }\n    // Remove class from the node\n  , removeClass: function(name) {\n      if (this.hasClass(name)) {\n        this.attr('class', this.classes().filter(function(c) {\n          return c != name\n        }).join(' '))\n      }\n\n      return this\n    }\n    // Toggle the presence of a class on the node\n  , toggleClass: function(name) {\n      return this.hasClass(name) ? this.removeClass(name) : this.addClass(name)\n    }\n    // Get referenced element form attribute value\n  , reference: function(attr) {\n      return SVG.get(this.attr(attr))\n    }\n    // Returns the parent element instance\n  , parent: function(type) {\n      var parent = this\n\n      // check for parent\n      if(!parent.node.parentNode) return null\n\n      // get parent element\n      parent = SVG.adopt(parent.node.parentNode)\n\n      if(!type) return parent\n\n      // loop trough ancestors if type is given\n      while(parent.node instanceof SVGElement){\n        if(typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent\n        parent = SVG.adopt(parent.node.parentNode)\n      }\n    }\n    // Get parent document\n  , doc: function() {\n      return this instanceof SVG.Doc ? this : this.parent(SVG.Doc)\n    }\n    // return array of all ancestors of given type up to the root svg\n  , parents: function(type) {\n      var parents = [], parent = this\n\n      do{\n        parent = parent.parent(type)\n        if(!parent || !parent.node) break\n\n        parents.push(parent)\n      } while(parent.parent)\n\n      return parents\n    }\n    // matches the element vs a css selector\n  , matches: function(selector){\n      return matches(this.node, selector)\n    }\n    // Returns the svg node to call native svg methods on it\n  , native: function() {\n      return this.node\n    }\n    // Import raw svg\n  , svg: function(svg) {\n      // create temporary holder\n      var well = document.createElement('svg')\n\n      // act as a setter if svg is given\n      if (svg && this instanceof SVG.Parent) {\n        // dump raw svg\n        well.innerHTML = '<svg>' + svg.replace(/\\n/, '').replace(/<(\\w+)([^<]+?)\\/>/g, '<$1$2></$1>') + '</svg>'\n\n        // transplant nodes\n        for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++)\n          this.node.appendChild(well.firstChild.firstChild)\n\n      // otherwise act as a getter\n      } else {\n        // create a wrapping svg element in case of partial content\n        well.appendChild(svg = document.createElement('svg'))\n\n        // write svgjs data to the dom\n        this.writeDataToDom()\n\n        // insert a copy of this node\n        svg.appendChild(this.node.cloneNode(true))\n\n        // return target element\n        return well.innerHTML.replace(/^<svg>/, '').replace(/<\\/svg>$/, '')\n      }\n\n      return this\n    }\n  // write svgjs data to the dom\n  , writeDataToDom: function() {\n\n      // dump variables recursively\n      if(this.each || this.lines){\n        var fn = this.each ? this : this.lines();\n        fn.each(function(){\n          this.writeDataToDom()\n        })\n      }\n\n      // remove previously set data\n      this.node.removeAttribute('svgjs:data')\n\n      if(Object.keys(this.dom).length)\n        this.node.setAttributeNS(SVG.svgjs, 'svgjs:data', JSON.stringify(this.dom))\n\n      return this\n    }\n  // set given data to the elements data property\n  , setData: function(o){\n      this.dom = o\n      return this\n    }\n  }\n})\n\nSVG.FX = SVG.invent({\n  // Initialize FX object\n  create: function(element) {\n    // store target element\n    this.target = element\n  }\n\n  // Add class methods\n, extend: {\n    // Add animation parameters and start animation\n    animate: function(d, ease, delay) {\n      var akeys, skeys, key\n        , element = this.target\n        , fx = this\n\n      // dissect object if one is passed\n      if (typeof d == 'object') {\n        delay = d.delay\n        ease = d.ease\n        d = d.duration\n      }\n\n      // ensure default duration and easing\n      d = d == '=' ? d : d == null ? 1000 : new SVG.Number(d).valueOf()\n      ease = ease || '<>'\n\n      // process values\n      fx.at = function(pos) {\n        var i\n\n        // normalise pos\n        pos = pos < 0 ? 0 : pos > 1 ? 1 : pos\n\n        // collect attribute keys\n        if (akeys == null) {\n          akeys = []\n          for (key in fx.attrs)\n            akeys.push(key)\n\n          // make sure morphable elements are scaled, translated and morphed all together\n          if (element.morphArray && (fx.destination.plot || akeys.indexOf('points') > -1)) {\n            // get destination\n            var box\n              , p = new element.morphArray(fx.destination.plot || fx.attrs.points || element.array())\n\n            // add size\n            if (fx.destination.size)\n              p.size(fx.destination.size.width.to, fx.destination.size.height.to)\n\n            // add movement\n            box = p.bbox()\n            if (fx.destination.x)\n              p.move(fx.destination.x.to, box.y)\n            else if (fx.destination.cx)\n              p.move(fx.destination.cx.to - box.width / 2, box.y)\n\n            box = p.bbox()\n            if (fx.destination.y)\n              p.move(box.x, fx.destination.y.to)\n            else if (fx.destination.cy)\n              p.move(box.x, fx.destination.cy.to - box.height / 2)\n\n            // reset destination values\n            fx.destination = {\n              plot: element.array().morph(p)\n            }\n          }\n        }\n\n        // collect style keys\n        if (skeys == null) {\n          skeys = []\n          for (key in fx.styles)\n            skeys.push(key)\n        }\n\n        // apply easing\n        pos = ease == '<>' ?\n          (-Math.cos(pos * Math.PI) / 2) + 0.5 :\n        ease == '>' ?\n          Math.sin(pos * Math.PI / 2) :\n        ease == '<' ?\n          -Math.cos(pos * Math.PI / 2) + 1 :\n        ease == '-' ?\n          pos :\n        typeof ease == 'function' ?\n          ease(pos) :\n          pos\n\n        // run plot function\n        if (fx.destination.plot) {\n          element.plot(fx.destination.plot.at(pos))\n\n        } else {\n          // run all x-position properties\n          if (fx.destination.x)\n            element.x(fx.destination.x.at(pos))\n          else if (fx.destination.cx)\n            element.cx(fx.destination.cx.at(pos))\n\n          // run all y-position properties\n          if (fx.destination.y)\n            element.y(fx.destination.y.at(pos))\n          else if (fx.destination.cy)\n            element.cy(fx.destination.cy.at(pos))\n\n          // run all size properties\n          if (fx.destination.size)\n            element.size(fx.destination.size.width.at(pos), fx.destination.size.height.at(pos))\n        }\n\n        // run all viewbox properties\n        if (fx.destination.viewbox)\n          element.viewbox(\n            fx.destination.viewbox.x.at(pos)\n          , fx.destination.viewbox.y.at(pos)\n          , fx.destination.viewbox.width.at(pos)\n          , fx.destination.viewbox.height.at(pos)\n          )\n\n        // run leading property\n        if (fx.destination.leading)\n          element.leading(fx.destination.leading.at(pos))\n\n        // animate attributes\n        for (i = akeys.length - 1; i >= 0; i--)\n          element.attr(akeys[i], at(fx.attrs[akeys[i]], pos))\n\n        // animate styles\n        for (i = skeys.length - 1; i >= 0; i--)\n          element.style(skeys[i], at(fx.styles[skeys[i]], pos))\n\n        // callback for each keyframe\n        if (fx.situation.during)\n          fx.situation.during.call(element, pos, function(from, to) {\n            return at({ from: from, to: to }, pos)\n          })\n      }\n\n      if (typeof d === 'number') {\n        // delay animation\n        this.timeout = setTimeout(function() {\n          var start = new Date().getTime()\n\n          // initialize situation object\n          fx.situation.start    = start\n          fx.situation.play     = true\n          fx.situation.finish   = start + d\n          fx.situation.duration = d\n          fx.situation.ease     = ease\n\n          // render function\n          fx.render = function() {\n\n            if (fx.situation.play === true) {\n              // calculate pos\n              var time = new Date().getTime()\n                , pos = time > fx.situation.finish ? 1 : (time - fx.situation.start) / d\n\n              // reverse pos if animation is reversed\n              if (fx.situation.reversing)\n                pos = -pos + 1\n\n              // process values\n              fx.at(pos)\n\n              // finish off animation\n              if (time > fx.situation.finish) {\n                if (fx.destination.plot)\n                  element.plot(new SVG.PointArray(fx.destination.plot.destination).settle())\n\n                if (fx.situation.loop === true || (typeof fx.situation.loop == 'number' && fx.situation.loop > 0)) {\n                  // register reverse\n                  if (fx.situation.reverse)\n                    fx.situation.reversing = !fx.situation.reversing\n\n                  if (typeof fx.situation.loop == 'number') {\n                    // reduce loop count\n                    if (!fx.situation.reverse || fx.situation.reversing)\n                      --fx.situation.loop\n\n                    // remove last loop if reverse is disabled\n                    if (!fx.situation.reverse && fx.situation.loop == 1)\n                      --fx.situation.loop\n                  }\n\n                  fx.animate(d, ease, delay)\n                } else {\n                  fx.situation.after ? fx.situation.after.apply(element, [fx]) : fx.stop()\n                }\n\n              } else {\n                fx.animationFrame = requestAnimationFrame(fx.render)\n              }\n            } else {\n              fx.animationFrame = requestAnimationFrame(fx.render)\n            }\n\n          }\n\n          // start animation\n          fx.render()\n\n        }, new SVG.Number(delay).valueOf())\n      }\n\n      return this\n    }\n    // Get bounding box of target element\n  , bbox: function() {\n      return this.target.bbox()\n    }\n    // Add animatable attributes\n  , attr: function(a, v) {\n      // apply attributes individually\n      if (typeof a == 'object') {\n        for (var key in a)\n          this.attr(key, a[key])\n\n      } else {\n        // get the current state\n        var from = this.target.attr(a)\n\n        // detect format\n        if (a == 'transform') {\n          // merge given transformation with an existing one\n          if (this.attrs[a])\n            v = this.attrs[a].destination.multiply(v)\n\n          // prepare matrix for morphing\n          this.attrs[a] = (new SVG.Matrix(this.target)).morph(v)\n\n          // add parametric rotation values\n          if (this.param) {\n            // get initial rotation\n            v = this.target.transform('rotation')\n\n            // add param\n            this.attrs[a].param = {\n              from: this.target.param || { rotation: v, cx: this.param.cx, cy: this.param.cy }\n            , to:   this.param\n            }\n          }\n\n        } else {\n          this.attrs[a] = SVG.Color.isColor(v) ?\n            // prepare color for morphing\n            new SVG.Color(from).morph(v) :\n          SVG.regex.unit.test(v) ?\n            // prepare number for morphing\n            new SVG.Number(from).morph(v) :\n            // prepare for plain morphing\n            { from: from, to: v }\n        }\n      }\n\n      return this\n    }\n    // Add animatable styles\n  , style: function(s, v) {\n      if (typeof s == 'object')\n        for (var key in s)\n          this.style(key, s[key])\n\n      else\n        this.styles[s] = { from: this.target.style(s), to: v }\n\n      return this\n    }\n    // Animatable x-axis\n  , x: function(x) {\n      this.destination.x = new SVG.Number(this.target.x()).morph(x)\n\n      return this\n    }\n    // Animatable y-axis\n  , y: function(y) {\n      this.destination.y = new SVG.Number(this.target.y()).morph(y)\n\n      return this\n    }\n    // Animatable center x-axis\n  , cx: function(x) {\n      this.destination.cx = new SVG.Number(this.target.cx()).morph(x)\n\n      return this\n    }\n    // Animatable center y-axis\n  , cy: function(y) {\n      this.destination.cy = new SVG.Number(this.target.cy()).morph(y)\n\n      return this\n    }\n    // Add animatable move\n  , move: function(x, y) {\n      return this.x(x).y(y)\n    }\n    // Add animatable center\n  , center: function(x, y) {\n      return this.cx(x).cy(y)\n    }\n    // Add animatable size\n  , size: function(width, height) {\n      if (this.target instanceof SVG.Text) {\n        // animate font size for Text elements\n        this.attr('font-size', width)\n\n      } else {\n        // animate bbox based size for all other elements\n        var box = this.target.bbox()\n\n        this.destination.size = {\n          width:  new SVG.Number(box.width).morph(width)\n        , height: new SVG.Number(box.height).morph(height)\n        }\n      }\n\n      return this\n    }\n    // Add animatable plot\n  , plot: function(p) {\n      this.destination.plot = p\n\n      return this\n    }\n    // Add leading method\n  , leading: function(value) {\n      if (this.target.destination.leading)\n        this.destination.leading = new SVG.Number(this.target.destination.leading).morph(value)\n\n      return this\n    }\n    // Add animatable viewbox\n  , viewbox: function(x, y, width, height) {\n      if (this.target instanceof SVG.Container) {\n        var box = this.target.viewbox()\n\n        this.destination.viewbox = {\n          x:      new SVG.Number(box.x).morph(x)\n        , y:      new SVG.Number(box.y).morph(y)\n        , width:  new SVG.Number(box.width).morph(width)\n        , height: new SVG.Number(box.height).morph(height)\n        }\n      }\n\n      return this\n    }\n    // Add animateable gradient update\n  , update: function(o) {\n      if (this.target instanceof SVG.Stop) {\n        if (o.opacity != null) this.attr('stop-opacity', o.opacity)\n        if (o.color   != null) this.attr('stop-color', o.color)\n        if (o.offset  != null) this.attr('offset', new SVG.Number(o.offset))\n      }\n\n      return this\n    }\n    // Add callback for each keyframe\n  , during: function(during) {\n      this.situation.during = during\n\n      return this\n    }\n    // Callback after animation\n  , after: function(after) {\n      this.situation.after = after\n\n      return this\n    }\n    // Make loopable\n  , loop: function(times, reverse) {\n      // store current loop and total loops\n      this.situation.loop = this.situation.loops = times || true\n\n      // make reversable\n      this.situation.reverse = !!reverse\n\n      return this\n    }\n    // Stop running animation\n  , stop: function(fulfill) {\n      // fulfill animation\n      if (fulfill === true) {\n\n        this.animate(0)\n\n        if (this.situation.after)\n          this.situation.after.apply(this.target, [this])\n\n      } else {\n        // stop current animation\n        clearTimeout(this.timeout)\n        cancelAnimationFrame(this.animationFrame);\n\n        // reset storage for properties\n        this.attrs       = {}\n        this.styles      = {}\n        this.situation   = {}\n        this.destination = {}\n      }\n\n      return this\n    }\n    // Pause running animation\n  , pause: function() {\n      if (this.situation.play === true) {\n        this.situation.play  = false\n        this.situation.pause = new Date().getTime()\n      }\n\n      return this\n    }\n    // Play running animation\n  , play: function() {\n      if (this.situation.play === false) {\n        var pause = new Date().getTime() - this.situation.pause\n\n        this.situation.finish += pause\n        this.situation.start  += pause\n        this.situation.play    = true\n      }\n\n      return this\n    }\n\n  }\n\n  // Define parent class\n, parent: SVG.Element\n\n  // Add method to parent elements\n, construct: {\n    // Get fx module or create a new one, then animate with given duration and ease\n    animate: function(d, ease, delay) {\n      return (this.fx || (this.fx = new SVG.FX(this))).stop().animate(d, ease, delay)\n    }\n    // Stop current animation; this is an alias to the fx instance\n  , stop: function(fulfill) {\n      if (this.fx)\n        this.fx.stop(fulfill)\n\n      return this\n    }\n    // Pause current animation\n  , pause: function() {\n      if (this.fx)\n        this.fx.pause()\n\n      return this\n    }\n    // Play paused current animation\n  , play: function() {\n      if (this.fx)\n        this.fx.play()\n\n      return this\n    }\n\n  }\n})\n\nSVG.BBox = SVG.invent({\n  // Initialize\n  create: function(element) {\n    // get values if element is given\n    if (element) {\n      var box\n\n      // yes this is ugly, but Firefox can be a bitch when it comes to elements that are not yet rendered\n      try {\n        // find native bbox\n        box = element.node.getBBox()\n      } catch(e) {\n        if(element instanceof SVG.Shape){\n          var clone = element.clone().addTo(SVG.parser.draw)\n          box = clone.bbox()\n          clone.remove()\n        }else{\n          box = {\n            x:      element.node.clientLeft\n          , y:      element.node.clientTop\n          , width:  element.node.clientWidth\n          , height: element.node.clientHeight\n          }\n        }\n      }\n\n      // plain x and y\n      this.x = box.x\n      this.y = box.y\n\n      // plain width and height\n      this.width  = box.width\n      this.height = box.height\n    }\n\n    // add center, right and bottom\n    fullBox(this)\n  }\n\n  // Define Parent\n, parent: SVG.Element\n\n  // Constructor\n, construct: {\n    // Get bounding box\n    bbox: function() {\n      return new SVG.BBox(this)\n    }\n  }\n\n})\n\nSVG.TBox = SVG.invent({\n  // Initialize\n  create: function(element) {\n    // get values if element is given\n    if (element) {\n      var t   = element.ctm().extract()\n        , box = element.bbox()\n\n      // width and height including transformations\n      this.width  = box.width  * t.scaleX\n      this.height = box.height * t.scaleY\n\n      // x and y including transformations\n      this.x = box.x + t.x\n      this.y = box.y + t.y\n    }\n\n    // add center, right and bottom\n    fullBox(this)\n  }\n\n  // Define Parent\n, parent: SVG.Element\n\n  // Constructor\n, construct: {\n    // Get transformed bounding box\n    tbox: function() {\n      return new SVG.TBox(this)\n    }\n  }\n\n})\n\n\nSVG.RBox = SVG.invent({\n  // Initialize\n  create: function(element) {\n    if (element) {\n      var e    = element.doc().parent()\n        , box  = element.node.getBoundingClientRect()\n        , zoom = 1\n\n      // get screen offset\n      this.x = box.left\n      this.y = box.top\n\n      // subtract parent offset\n      this.x -= e.offsetLeft\n      this.y -= e.offsetTop\n\n      while (e = e.offsetParent) {\n        this.x -= e.offsetLeft\n        this.y -= e.offsetTop\n      }\n\n      // calculate cumulative zoom from svg documents\n      e = element\n      while (e.parent && (e = e.parent())) {\n        if (e.viewbox) {\n          zoom *= e.viewbox().zoom\n          this.x -= e.x() || 0\n          this.y -= e.y() || 0\n        }\n      }\n\n      // recalculate viewbox distortion\n      this.width  = box.width  /= zoom\n      this.height = box.height /= zoom\n    }\n\n    // add center, right and bottom\n    fullBox(this)\n\n    // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\n    this.x += window.scrollX\n    this.y += window.scrollY\n  }\n\n  // define Parent\n, parent: SVG.Element\n\n  // Constructor\n, construct: {\n    // Get rect box\n    rbox: function() {\n      return new SVG.RBox(this)\n    }\n  }\n\n})\n\n// Add universal merge method\n;[SVG.BBox, SVG.TBox, SVG.RBox].forEach(function(c) {\n\n  SVG.extend(c, {\n    // Merge rect box with another, return a new instance\n    merge: function(box) {\n      var b = new c()\n\n      // merge boxes\n      b.x      = Math.min(this.x, box.x)\n      b.y      = Math.min(this.y, box.y)\n      b.width  = Math.max(this.x + this.width,  box.x + box.width)  - b.x\n      b.height = Math.max(this.y + this.height, box.y + box.height) - b.y\n\n      return fullBox(b)\n    }\n\n  })\n\n})\n\nSVG.Matrix = SVG.invent({\n  // Initialize\n  create: function(source) {\n    var i, base = arrayToMatrix([1, 0, 0, 1, 0, 0])\n\n    // ensure source as object\n    source = source instanceof SVG.Element ?\n      source.matrixify() :\n    typeof source === 'string' ?\n      stringToMatrix(source) :\n    arguments.length == 6 ?\n      arrayToMatrix([].slice.call(arguments)) :\n    typeof source === 'object' ?\n      source : base\n\n    // merge source\n    for (i = abcdef.length - 1; i >= 0; i--)\n      this[abcdef[i]] = source && typeof source[abcdef[i]] === 'number' ?\n        source[abcdef[i]] : base[abcdef[i]]\n  }\n\n  // Add methods\n, extend: {\n    // Extract individual transformations\n    extract: function() {\n      // find delta transform points\n      var px    = deltaTransformPoint(this, 0, 1)\n        , py    = deltaTransformPoint(this, 1, 0)\n        , skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90\n\n      return {\n        // translation\n        x:        this.e\n      , y:        this.f\n        // skew\n      , skewX:    -skewX\n      , skewY:    180 / Math.PI * Math.atan2(py.y, py.x)\n        // scale\n      , scaleX:   Math.sqrt(this.a * this.a + this.b * this.b)\n      , scaleY:   Math.sqrt(this.c * this.c + this.d * this.d)\n        // rotation\n      , rotation: skewX\n      }\n    }\n    // Clone matrix\n  , clone: function() {\n      return new SVG.Matrix(this)\n    }\n    // Morph one matrix into another\n  , morph: function(matrix) {\n      // store new destination\n      this.destination = new SVG.Matrix(matrix)\n\n      return this\n    }\n    // Get morphed matrix at a given position\n  , at: function(pos) {\n      // make sure a destination is defined\n      if (!this.destination) return this\n\n      // calculate morphed matrix at a given position\n      var matrix = new SVG.Matrix({\n        a: this.a + (this.destination.a - this.a) * pos\n      , b: this.b + (this.destination.b - this.b) * pos\n      , c: this.c + (this.destination.c - this.c) * pos\n      , d: this.d + (this.destination.d - this.d) * pos\n      , e: this.e + (this.destination.e - this.e) * pos\n      , f: this.f + (this.destination.f - this.f) * pos\n      })\n\n      // process parametric rotation if present\n      if (this.param && this.param.to) {\n        // calculate current parametric position\n        var param = {\n          rotation: this.param.from.rotation + (this.param.to.rotation - this.param.from.rotation) * pos\n        , cx:       this.param.from.cx\n        , cy:       this.param.from.cy\n        }\n\n        // rotate matrix\n        matrix = matrix.rotate(\n          (this.param.to.rotation - this.param.from.rotation * 2) * pos\n        , param.cx\n        , param.cy\n        )\n\n        // store current parametric values\n        matrix.param = param\n      }\n\n      return matrix\n    }\n    // Multiplies by given matrix\n  , multiply: function(matrix) {\n      return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()))\n    }\n    // Inverses matrix\n  , inverse: function() {\n      return new SVG.Matrix(this.native().inverse())\n    }\n    // Translate matrix\n  , translate: function(x, y) {\n      return new SVG.Matrix(this.native().translate(x || 0, y || 0))\n    }\n    // Scale matrix\n  , scale: function(x, y, cx, cy) {\n      // support universal scale\n      if (arguments.length == 1 || arguments.length == 3)\n        y = x\n      if (arguments.length == 3) {\n        cy = cx\n        cx = y\n      }\n\n      return this.around(cx, cy, new SVG.Matrix(x, 0, 0, y, 0, 0))\n    }\n    // Rotate matrix\n  , rotate: function(r, cx, cy) {\n      // convert degrees to radians\n      r = SVG.utils.radians(r)\n\n      return this.around(cx, cy, new SVG.Matrix(Math.cos(r), Math.sin(r), -Math.sin(r), Math.cos(r), 0, 0))\n    }\n    // Flip matrix on x or y, at a given offset\n  , flip: function(a, o) {\n      return a == 'x' ? this.scale(-1, 1, o, 0) : this.scale(1, -1, 0, o)\n    }\n    // Skew\n  , skew: function(x, y, cx, cy) {\n      return this.around(cx, cy, this.native().skewX(x || 0).skewY(y || 0))\n    }\n    // SkewX\n  , skewX: function(x, cx, cy) {\n      return this.around(cx, cy, this.native().skewX(x || 0))\n    }\n    // SkewY\n  , skewY: function(y, cx, cy) {\n      return this.around(cx, cy, this.native().skewY(y || 0))\n    }\n    // Transform around a center point\n  , around: function(cx, cy, matrix) {\n      return this\n        .multiply(new SVG.Matrix(1, 0, 0, 1, cx || 0, cy || 0))\n        .multiply(matrix)\n        .multiply(new SVG.Matrix(1, 0, 0, 1, -cx || 0, -cy || 0))\n    }\n    // Convert to native SVGMatrix\n  , native: function() {\n      // create new matrix\n      var matrix = SVG.parser.draw.node.createSVGMatrix()\n\n      // update with current values\n      for (var i = abcdef.length - 1; i >= 0; i--)\n        matrix[abcdef[i]] = this[abcdef[i]]\n\n      return matrix\n    }\n    // Convert matrix to string\n  , toString: function() {\n      return 'matrix(' + this.a + ',' + this.b + ',' + this.c + ',' + this.d + ',' + this.e + ',' + this.f + ')'\n    }\n  }\n\n  // Define parent\n, parent: SVG.Element\n\n  // Add parent method\n, construct: {\n    // Get current matrix\n    ctm: function() {\n      return new SVG.Matrix(this.node.getCTM())\n    },\n    // Get current screen matrix\n    screenCTM: function() {\n      return new SVG.Matrix(this.node.getScreenCTM())\n    }\n\n  }\n\n})\nSVG.extend(SVG.Element, {\n  // Set svg element attribute\n  attr: function(a, v, n) {\n    // act as full getter\n    if (a == null) {\n      // get an object of attributes\n      a = {}\n      v = this.node.attributes\n      for (n = v.length - 1; n >= 0; n--)\n        a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue) ? parseFloat(v[n].nodeValue) : v[n].nodeValue\n\n      return a\n\n    } else if (typeof a == 'object') {\n      // apply every attribute individually if an object is passed\n      for (v in a) this.attr(v, a[v])\n\n    } else if (v === null) {\n        // remove value\n        this.node.removeAttribute(a)\n\n    } else if (v == null) {\n      // act as a getter if the first and only argument is not an object\n      v = this.node.getAttribute(a)\n      return v == null ?\n        SVG.defaults.attrs[a] :\n      SVG.regex.isNumber.test(v) ?\n        parseFloat(v) : v\n\n    } else {\n      // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0\n      if (a == 'stroke-width')\n        this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null)\n      else if (a == 'stroke')\n        this._stroke = v\n\n      // convert image fill and stroke to patterns\n      if (a == 'fill' || a == 'stroke') {\n        if (SVG.regex.isImage.test(v))\n          v = this.doc().defs().image(v, 0, 0)\n\n        if (v instanceof SVG.Image)\n          v = this.doc().defs().pattern(0, 0, function() {\n            this.add(v)\n          })\n      }\n\n      // ensure correct numeric values (also accepts NaN and Infinity)\n      if (typeof v === 'number')\n        v = new SVG.Number(v)\n\n      // ensure full hex color\n      else if (SVG.Color.isColor(v))\n        v = new SVG.Color(v)\n\n      // parse array values\n      else if (Array.isArray(v))\n        v = new SVG.Array(v)\n\n      // store parametric transformation values locally\n      else if (v instanceof SVG.Matrix && v.param)\n        this.param = v.param\n\n      // if the passed attribute is leading...\n      if (a == 'leading') {\n        // ... call the leading method instead\n        if (this.leading)\n          this.leading(v)\n      } else {\n        // set given attribute on node\n        typeof n === 'string' ?\n          this.node.setAttributeNS(n, a, v.toString()) :\n          this.node.setAttribute(a, v.toString())\n      }\n\n      // rebuild if required\n      if (this.rebuild && (a == 'font-size' || a == 'x'))\n        this.rebuild(a, v)\n    }\n\n    return this\n  }\n})\nSVG.extend(SVG.Element, SVG.FX, {\n  // Add transformations\n  transform: function(o, relative) {\n    // get target in case of the fx module, otherwise reference this\n    var target = this.target || this\n      , matrix\n\n    // act as a getter\n    if (typeof o !== 'object') {\n      // get current matrix\n      matrix = new SVG.Matrix(target).extract()\n\n      // add parametric rotation\n      if (typeof this.param === 'object') {\n        matrix.rotation = this.param.rotation\n        matrix.cx       = this.param.cx\n        matrix.cy       = this.param.cy\n      }\n\n      return typeof o === 'string' ? matrix[o] : matrix\n    }\n\n    // get current matrix\n    matrix = this instanceof SVG.FX && this.attrs.transform ?\n      this.attrs.transform :\n      new SVG.Matrix(target)\n\n    // ensure relative flag\n    relative = !!relative || !!o.relative\n\n    // act on matrix\n    if (o.a != null) {\n      matrix = relative ?\n        // relative\n        matrix.multiply(new SVG.Matrix(o)) :\n        // absolute\n        new SVG.Matrix(o)\n\n    // act on rotation\n    } else if (o.rotation != null) {\n      // ensure centre point\n      ensureCentre(o, target)\n\n      // relativize rotation value\n      if (relative) {\n        o.rotation += this.param && this.param.rotation != null ?\n          this.param.rotation :\n          matrix.extract().rotation\n      }\n\n      // store parametric values\n      this.param = o\n\n      // apply transformation\n      if (this instanceof SVG.Element) {\n        matrix = relative ?\n          // relative\n          matrix.rotate(o.rotation, o.cx, o.cy) :\n          // absolute\n          matrix.rotate(o.rotation - matrix.extract().rotation, o.cx, o.cy)\n      }\n\n    // act on scale\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\n      // ensure centre point\n      ensureCentre(o, target)\n\n      // ensure scale values on both axes\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\n\n      if (!relative) {\n        // absolute; multiply inversed values\n        var e = matrix.extract()\n        o.scaleX = o.scaleX * 1 / e.scaleX\n        o.scaleY = o.scaleY * 1 / e.scaleY\n      }\n\n      matrix = matrix.scale(o.scaleX, o.scaleY, o.cx, o.cy)\n\n    // act on skew\n    } else if (o.skewX != null || o.skewY != null) {\n      // ensure centre point\n      ensureCentre(o, target)\n\n      // ensure skew values on both axes\n      o.skewX = o.skewX != null ? o.skewX : 0\n      o.skewY = o.skewY != null ? o.skewY : 0\n\n      if (!relative) {\n        // absolute; reset skew values\n        var e = matrix.extract()\n        matrix = matrix.multiply(new SVG.Matrix().skew(e.skewX, e.skewY, o.cx, o.cy).inverse())\n      }\n\n      matrix = matrix.skew(o.skewX, o.skewY, o.cx, o.cy)\n\n    // act on flip\n    } else if (o.flip) {\n      matrix = matrix.flip(\n        o.flip\n      , o.offset == null ? target.bbox()['c' + o.flip] : o.offset\n      )\n\n    // act on translate\n    } else if (o.x != null || o.y != null) {\n      if (relative) {\n        // relative\n        matrix = matrix.translate(o.x, o.y)\n      } else {\n        // absolute\n        if (o.x != null) matrix.e = o.x\n        if (o.y != null) matrix.f = o.y\n      }\n    }\n\n    return this.attr(this instanceof SVG.Pattern ? 'patternTransform' : this instanceof SVG.Gradient ? 'gradientTransform' : 'transform', matrix)\n  }\n})\n\nSVG.extend(SVG.Element, {\n  // Reset all transformations\n  untransform: function() {\n    return this.attr('transform', null)\n  },\n  // merge the whole transformation chain into one matrix\n  matrixify: function() {\n\n    var matrix = (this.attr('transform') || '')\n      // split transformations\n      .split(/\\)\\s*/).slice(0,-1).map(function(str){\n        // generate key => value pairs\n        var kv = str.trim().split('(')\n        return [kv[0], kv[1].split(SVG.regex.matrixElements).map(function(str){ return parseFloat(str) })]\n      })\n      // calculate every transformation into one matrix\n      .reduce(function(matrix, transform){\n\n        if(transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]))\n        return matrix[transform[0]].apply(matrix, transform[1])\n\n      }, new SVG.Matrix())\n    // apply calculated matrix to element\n    this.attr('transform', matrix)\n\n    return matrix\n  },\n  // add an element to another parent without changing the visual representation on the screen\n  toParent: function(parent) {\n    if(this == parent) return this\n    var ctm = this.screenCTM()\n    var temp = parent.rect(1,1)\n    var pCtm = temp.screenCTM().inverse()\n    temp.remove()\n\n    this.addTo(parent).untransform().transform(pCtm.multiply(ctm))\n\n    return this\n  },\n  // same as above with parent equals root-svg\n  toDoc: function() {\n    return this.toParent(this.doc())\n  }\n\n})\n\nSVG.extend(SVG.Element, {\n  // Dynamic style generator\n  style: function(s, v) {\n    if (arguments.length == 0) {\n      // get full style\n      return this.node.style.cssText || ''\n\n    } else if (arguments.length < 2) {\n      // apply every style individually if an object is passed\n      if (typeof s == 'object') {\n        for (v in s) this.style(v, s[v])\n\n      } else if (SVG.regex.isCss.test(s)) {\n        // parse css string\n        s = s.split(';')\n\n        // apply every definition individually\n        for (var i = 0; i < s.length; i++) {\n          v = s[i].split(':')\n          this.style(v[0].replace(/\\s+/g, ''), v[1])\n        }\n      } else {\n        // act as a getter if the first and only argument is not an object\n        return this.node.style[camelCase(s)]\n      }\n\n    } else {\n      this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v\n    }\n\n    return this\n  }\n})\nSVG.Parent = SVG.invent({\n  // Initialize node\n  create: function(element) {\n    this.constructor.call(this, element)\n  }\n\n  // Inherit from\n, inherit: SVG.Element\n\n  // Add class methods\n, extend: {\n    // Returns all child elements\n    children: function() {\n      return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function(node) {\n        return SVG.adopt(node)\n      })\n    }\n    // Add given element at a position\n  , add: function(element, i) {\n      if (!this.has(element)) {\n        // define insertion index if none given\n        i = i == null ? this.children().length : i\n\n        // add element references\n        this.node.insertBefore(element.node, this.node.childNodes[i] || null)\n      }\n\n      return this\n    }\n    // Basically does the same as `add()` but returns the added element instead\n  , put: function(element, i) {\n      this.add(element, i)\n      return element\n    }\n    // Checks if the given element is a child\n  , has: function(element) {\n      return this.index(element) >= 0\n    }\n    // Gets index of given element\n  , index: function(element) {\n      return this.children().indexOf(element)\n    }\n    // Get a element at the given index\n  , get: function(i) {\n      return this.children()[i]\n    }\n    // Get first child, skipping the defs node\n  , first: function() {\n      return this.children()[0]\n    }\n    // Get the last child\n  , last: function() {\n      return this.children()[this.children().length - 1]\n    }\n    // Iterates over all children and invokes a given block\n  , each: function(block, deep) {\n      var i, il\n        , children = this.children()\n\n      for (i = 0, il = children.length; i < il; i++) {\n        if (children[i] instanceof SVG.Element)\n          block.apply(children[i], [i, children])\n\n        if (deep && (children[i] instanceof SVG.Container))\n          children[i].each(block, deep)\n      }\n\n      return this\n    }\n    // Remove a given child\n  , removeElement: function(element) {\n      this.node.removeChild(element.node)\n\n      return this\n    }\n    // Remove all elements in this container\n  , clear: function() {\n      // remove children\n      while(this.node.hasChildNodes())\n        this.node.removeChild(this.node.lastChild)\n\n      // remove defs reference\n      delete this._defs\n\n      return this\n    }\n  , // Get defs\n    defs: function() {\n      return this.doc().defs()\n    }\n  }\n\n})\n\nSVG.extend(SVG.Parent, {\n\n  ungroup: function(parent, depth) {\n    if(depth === 0 || this instanceof SVG.Defs) return this\n\n    parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent))\n    depth = depth || Infinity\n\n    this.each(function(){\n      if(this instanceof SVG.Defs) return this\n      if(this instanceof SVG.Parent) return this.ungroup(parent, depth-1)\n      return this.toParent(parent)\n    })\n\n    this.node.firstChild || this.remove()\n\n    return this\n  },\n\n  flatten: function(parent, depth) {\n    return this.ungroup(parent, depth)\n  }\n\n})\nSVG.Container = SVG.invent({\n  // Initialize node\n  create: function(element) {\n    this.constructor.call(this, element)\n  }\n\n  // Inherit from\n, inherit: SVG.Parent\n\n  // Add class methods\n, extend: {\n    // Get the viewBox and calculate the zoom value\n    viewbox: function(v) {\n      if (arguments.length == 0)\n        // act as a getter if there are no arguments\n        return new SVG.ViewBox(this)\n\n      // otherwise act as a setter\n      v = arguments.length == 1 ?\n        [v.x, v.y, v.width, v.height] :\n        [].slice.call(arguments)\n\n      return this.attr('viewBox', v)\n    }\n  }\n\n})\n// Add events to elements\n;[  'click'\n  , 'dblclick'\n  , 'mousedown'\n  , 'mouseup'\n  , 'mouseover'\n  , 'mouseout'\n  , 'mousemove'\n  // , 'mouseenter' -> not supported by IE\n  // , 'mouseleave' -> not supported by IE\n  , 'touchstart'\n  , 'touchmove'\n  , 'touchleave'\n  , 'touchend'\n  , 'touchcancel' ].forEach(function(event) {\n\n  // add event to SVG.Element\n  SVG.Element.prototype[event] = function(f) {\n    var self = this\n\n    // bind event to element rather than element node\n    this.node['on' + event] = typeof f == 'function' ?\n      function() { return f.apply(self, arguments) } : null\n\n    return this\n  }\n\n})\n\n// Initialize listeners stack\nSVG.listeners = []\nSVG.handlerMap = []\n\n// Add event binder in the SVG namespace\nSVG.on = function(node, event, listener, binding) {\n  // create listener, get object-index\n  var l     = listener.bind(binding || node.instance || node)\n    , index = (SVG.handlerMap.indexOf(node) + 1 || SVG.handlerMap.push(node)) - 1\n    , ev    = event.split('.')[0]\n    , ns    = event.split('.')[1] || '*'\n\n\n  // ensure valid object\n  SVG.listeners[index]         = SVG.listeners[index]         || {}\n  SVG.listeners[index][ev]     = SVG.listeners[index][ev]     || {}\n  SVG.listeners[index][ev][ns] = SVG.listeners[index][ev][ns] || {}\n\n  // reference listener\n  SVG.listeners[index][ev][ns][listener] = l\n\n  // add listener\n  node.addEventListener(ev, l, false)\n}\n\n// Add event unbinder in the SVG namespace\nSVG.off = function(node, event, listener) {\n  var index = SVG.handlerMap.indexOf(node)\n    , ev    = event && event.split('.')[0]\n    , ns    = event && event.split('.')[1]\n\n  if(index == -1) return\n\n  if (listener) {\n    // remove listener reference\n    if (SVG.listeners[index][ev] && SVG.listeners[index][ev][ns || '*']) {\n      // remove listener\n      node.removeEventListener(ev, SVG.listeners[index][ev][ns || '*'][listener], false)\n\n      delete SVG.listeners[index][ev][ns || '*'][listener]\n    }\n\n  } else if (ns && ev) {\n    // remove all listeners for a namespaced event\n    if (SVG.listeners[index][ev] && SVG.listeners[index][ev][ns]) {\n      for (listener in SVG.listeners[index][ev][ns])\n        SVG.off(node, [ev, ns].join('.'), listener)\n\n      delete SVG.listeners[index][ev][ns]\n    }\n\n  } else if (ns){\n    // remove all listeners for a specific namespace\n    for(event in SVG.listeners[index]){\n        for(namespace in SVG.listeners[index][event]){\n            if(ns === namespace){\n                SVG.off(node, [event, ns].join('.'))\n            }\n        }\n    }\n\n  } else if (ev) {\n    // remove all listeners for the event\n    if (SVG.listeners[index][ev]) {\n      for (namespace in SVG.listeners[index][ev])\n        SVG.off(node, [ev, namespace].join('.'))\n\n      delete SVG.listeners[index][ev]\n    }\n\n  } else {\n    // remove all listeners on a given node\n    for (event in SVG.listeners[index])\n      SVG.off(node, event)\n\n    delete SVG.listeners[index]\n\n  }\n}\n\n//\nSVG.extend(SVG.Element, {\n  // Bind given event to listener\n  on: function(event, listener, binding) {\n    SVG.on(this.node, event, listener, binding)\n\n    return this\n  }\n  // Unbind event from listener\n, off: function(event, listener) {\n    SVG.off(this.node, event, listener)\n\n    return this\n  }\n  // Fire given event\n, fire: function(event, data) {\n\n    // Dispatch event\n    if(event instanceof Event){\n        this.node.dispatchEvent(event)\n    }else{\n        this.node.dispatchEvent(new CustomEvent(event, {detail:data}))\n    }\n\n    return this\n  }\n})\n\nSVG.Defs = SVG.invent({\n  // Initialize node\n  create: 'defs'\n\n  // Inherit from\n, inherit: SVG.Container\n\n})\nSVG.G = SVG.invent({\n  // Initialize node\n  create: 'g'\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Move over x-axis\n    x: function(x) {\n      return x == null ? this.transform('x') : this.transform({ x: -this.x() + x }, true)\n    }\n    // Move over y-axis\n  , y: function(y) {\n      return y == null ? this.transform('y') : this.transform({ y: -this.y() + y }, true)\n    }\n    // Move by center over x-axis\n  , cx: function(x) {\n      return x == null ? this.tbox().cx : this.x(x - this.tbox().width / 2)\n    }\n    // Move by center over y-axis\n  , cy: function(y) {\n      return y == null ? this.tbox().cy : this.y(y - this.tbox().height / 2)\n    }\n  , gbox: function() {\n\n      var bbox  = this.bbox()\n        , trans = this.transform()\n\n      bbox.x  += trans.x\n      bbox.x2 += trans.x\n      bbox.cx += trans.x\n\n      bbox.y  += trans.y\n      bbox.y2 += trans.y\n      bbox.cy += trans.y\n\n      return bbox\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create a group element\n    group: function() {\n      return this.put(new SVG.G)\n    }\n  }\n})\n// ### This module adds backward / forward functionality to elements.\n\n//\nSVG.extend(SVG.Element, {\n  // Get all siblings, including myself\n  siblings: function() {\n    return this.parent().children()\n  }\n  // Get the curent position siblings\n, position: function() {\n    return this.parent().index(this)\n  }\n  // Get the next element (will return null if there is none)\n, next: function() {\n    return this.siblings()[this.position() + 1]\n  }\n  // Get the next element (will return null if there is none)\n, previous: function() {\n    return this.siblings()[this.position() - 1]\n  }\n  // Send given element one step forward\n, forward: function() {\n    var i = this.position() + 1\n      , p = this.parent()\n\n    // move node one step forward\n    p.removeElement(this).add(this, i)\n\n    // make sure defs node is always at the top\n    if (p instanceof SVG.Doc)\n      p.node.appendChild(p.defs().node)\n\n    return this\n  }\n  // Send given element one step backward\n, backward: function() {\n    var i = this.position()\n\n    if (i > 0)\n      this.parent().removeElement(this).add(this, i - 1)\n\n    return this\n  }\n  // Send given element all the way to the front\n, front: function() {\n    var p = this.parent()\n\n    // Move node forward\n    p.node.appendChild(this.node)\n\n    // Make sure defs node is always at the top\n    if (p instanceof SVG.Doc)\n      p.node.appendChild(p.defs().node)\n\n    return this\n  }\n  // Send given element all the way to the back\n, back: function() {\n    if (this.position() > 0)\n      this.parent().removeElement(this).add(this, 0)\n\n    return this\n  }\n  // Inserts a given element before the targeted element\n, before: function(element) {\n    element.remove()\n\n    var i = this.position()\n\n    this.parent().add(element, i)\n\n    return this\n  }\n  // Insters a given element after the targeted element\n, after: function(element) {\n    element.remove()\n\n    var i = this.position()\n\n    this.parent().add(element, i + 1)\n\n    return this\n  }\n\n})\nSVG.Mask = SVG.invent({\n  // Initialize node\n  create: function() {\n    this.constructor.call(this, SVG.create('mask'))\n\n    // keep references to masked elements\n    this.targets = []\n  }\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Unmask all masked elements and remove itself\n    remove: function() {\n      // unmask all targets\n      for (var i = this.targets.length - 1; i >= 0; i--)\n        if (this.targets[i])\n          this.targets[i].unmask()\n      delete this.targets\n\n      // remove mask from parent\n      this.parent().removeElement(this)\n\n      return this\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create masking element\n    mask: function() {\n      return this.defs().put(new SVG.Mask)\n    }\n  }\n})\n\n\nSVG.extend(SVG.Element, {\n  // Distribute mask to svg element\n  maskWith: function(element) {\n    // use given mask or create a new one\n    this.masker = element instanceof SVG.Mask ? element : this.parent().mask().add(element)\n\n    // store reverence on self in mask\n    this.masker.targets.push(this)\n\n    // apply mask\n    return this.attr('mask', 'url(\"#' + this.masker.attr('id') + '\")')\n  }\n  // Unmask element\n, unmask: function() {\n    delete this.masker\n    return this.attr('mask', null)\n  }\n\n})\n\nSVG.ClipPath = SVG.invent({\n  // Initialize node\n  create: function() {\n    this.constructor.call(this, SVG.create('clipPath'))\n\n    // keep references to clipped elements\n    this.targets = []\n  }\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Unclip all clipped elements and remove itself\n    remove: function() {\n      // unclip all targets\n      for (var i = this.targets.length - 1; i >= 0; i--)\n        if (this.targets[i])\n          this.targets[i].unclip()\n      delete this.targets\n\n      // remove clipPath from parent\n      this.parent().removeElement(this)\n\n      return this\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create clipping element\n    clip: function() {\n      return this.defs().put(new SVG.ClipPath)\n    }\n  }\n})\n\n//\nSVG.extend(SVG.Element, {\n  // Distribute clipPath to svg element\n  clipWith: function(element) {\n    // use given clip or create a new one\n    this.clipper = element instanceof SVG.ClipPath ? element : this.parent().clip().add(element)\n\n    // store reverence on self in mask\n    this.clipper.targets.push(this)\n\n    // apply mask\n    return this.attr('clip-path', 'url(\"#' + this.clipper.attr('id') + '\")')\n  }\n  // Unclip element\n, unclip: function() {\n    delete this.clipper\n    return this.attr('clip-path', null)\n  }\n\n})\nSVG.Gradient = SVG.invent({\n  // Initialize node\n  create: function(type) {\n    this.constructor.call(this, SVG.create(type + 'Gradient'))\n\n    // store type\n    this.type = type\n  }\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Add a color stop\n    at: function(offset, color, opacity) {\n      return this.put(new SVG.Stop).update(offset, color, opacity)\n    }\n    // Update gradient\n  , update: function(block) {\n      // remove all stops\n      this.clear()\n\n      // invoke passed block\n      if (typeof block == 'function')\n        block.call(this, this)\n\n      return this\n    }\n    // Return the fill id\n  , fill: function() {\n      return 'url(#' + this.id() + ')'\n    }\n    // Alias string convertion to fill\n  , toString: function() {\n      return this.fill()\n    }\n    // custom attr to handle transform\n  , attr: function(a, b, c) {\n      if(a == 'transform') a = 'gradientTransform'\n      return SVG.Container.prototype.attr.call(this, a, b, c)\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create gradient element in defs\n    gradient: function(type, block) {\n      return this.defs().gradient(type, block)\n    }\n  }\n})\n\n// Add animatable methods to both gradient and fx module\nSVG.extend(SVG.Gradient, SVG.FX, {\n  // From position\n  from: function(x, y) {\n    return (this.target || this).type == 'radial' ?\n      this.attr({ fx: new SVG.Number(x), fy: new SVG.Number(y) }) :\n      this.attr({ x1: new SVG.Number(x), y1: new SVG.Number(y) })\n  }\n  // To position\n, to: function(x, y) {\n    return (this.target || this).type == 'radial' ?\n      this.attr({ cx: new SVG.Number(x), cy: new SVG.Number(y) }) :\n      this.attr({ x2: new SVG.Number(x), y2: new SVG.Number(y) })\n  }\n})\n\n// Base gradient generation\nSVG.extend(SVG.Defs, {\n  // define gradient\n  gradient: function(type, block) {\n    return this.put(new SVG.Gradient(type)).update(block)\n  }\n\n})\n\nSVG.Stop = SVG.invent({\n  // Initialize node\n  create: 'stop'\n\n  // Inherit from\n, inherit: SVG.Element\n\n  // Add class methods\n, extend: {\n    // add color stops\n    update: function(o) {\n      if (typeof o == 'number' || o instanceof SVG.Number) {\n        o = {\n          offset:  arguments[0]\n        , color:   arguments[1]\n        , opacity: arguments[2]\n        }\n      }\n\n      // set attributes\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\n      if (o.color   != null) this.attr('stop-color', o.color)\n      if (o.offset  != null) this.attr('offset', new SVG.Number(o.offset))\n\n      return this\n    }\n  }\n\n})\n\nSVG.Pattern = SVG.invent({\n  // Initialize node\n  create: 'pattern'\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Return the fill id\n    fill: function() {\n      return 'url(#' + this.id() + ')'\n    }\n    // Update pattern by rebuilding\n  , update: function(block) {\n      // remove content\n      this.clear()\n\n      // invoke passed block\n      if (typeof block == 'function')\n        block.call(this, this)\n\n      return this\n    }\n    // Alias string convertion to fill\n  , toString: function() {\n      return this.fill()\n    }\n    // custom attr to handle transform\n  , attr: function(a, b, c) {\n      if(a == 'transform') a = 'patternTransform'\n      return SVG.Container.prototype.attr.call(this, a, b, c)\n    }\n\n  }\n\n  // Add parent method\n, construct: {\n    // Create pattern element in defs\n    pattern: function(width, height, block) {\n      return this.defs().pattern(width, height, block)\n    }\n  }\n})\n\nSVG.extend(SVG.Defs, {\n  // Define gradient\n  pattern: function(width, height, block) {\n    return this.put(new SVG.Pattern).update(block).attr({\n      x:            0\n    , y:            0\n    , width:        width\n    , height:       height\n    , patternUnits: 'userSpaceOnUse'\n    })\n  }\n\n})\nSVG.Doc = SVG.invent({\n  // Initialize node\n  create: function(element) {\n    if (element) {\n      // ensure the presence of a dom element\n      element = typeof element == 'string' ?\n        document.getElementById(element) :\n        element\n\n      // If the target is an svg element, use that element as the main wrapper.\n      // This allows svg.js to work with svg documents as well.\n      if (element.nodeName == 'svg') {\n        this.constructor.call(this, element)\n      } else {\n        this.constructor.call(this, SVG.create('svg'))\n        element.appendChild(this.node)\n      }\n\n      // set svg element attributes and ensure defs node\n      this.namespace().size('100%', '100%').defs()\n    }\n  }\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Add namespaces\n    namespace: function() {\n      return this\n        .attr({ xmlns: SVG.ns, version: '1.1' })\n        .attr('xmlns:xlink', SVG.xlink, SVG.xmlns)\n        .attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns)\n    }\n    // Creates and returns defs element\n  , defs: function() {\n      if (!this._defs) {\n        var defs\n\n        // Find or create a defs element in this instance\n        if (defs = this.node.getElementsByTagName('defs')[0])\n          this._defs = SVG.adopt(defs)\n        else\n          this._defs = new SVG.Defs\n\n        // Make sure the defs node is at the end of the stack\n        this.node.appendChild(this._defs.node)\n      }\n\n      return this._defs\n    }\n    // custom parent method\n  , parent: function() {\n      return this.node.parentNode.nodeName == '#document' ? null : this.node.parentNode\n    }\n    // Fix for possible sub-pixel offset. See:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=608812\n  , spof: function(spof) {\n      var pos = this.node.getScreenCTM()\n\n      if (pos)\n        this\n          .style('left', (-pos.e % 1) + 'px')\n          .style('top',  (-pos.f % 1) + 'px')\n\n      return this\n    }\n\n      // Removes the doc from the DOM\n  , remove: function() {\n      if(this.parent()) {\n        this.parent().removeChild(this.node);\n      }\n\n      return this;\n    }\n  }\n\n})\n\nSVG.Shape = SVG.invent({\n  // Initialize node\n  create: function(element) {\n    this.constructor.call(this, element)\n  }\n\n  // Inherit from\n, inherit: SVG.Element\n\n})\n\nSVG.Bare = SVG.invent({\n  // Initialize\n  create: function(element, inherit) {\n    // construct element\n    this.constructor.call(this, SVG.create(element))\n\n    // inherit custom methods\n    if (inherit)\n      for (var method in inherit.prototype)\n        if (typeof inherit.prototype[method] === 'function')\n          this[method] = inherit.prototype[method]\n  }\n\n  // Inherit from\n, inherit: SVG.Element\n\n  // Add methods\n, extend: {\n    // Insert some plain text\n    words: function(text) {\n      // remove contents\n      while (this.node.hasChildNodes())\n        this.node.removeChild(this.node.lastChild)\n\n      // create text node\n      this.node.appendChild(document.createTextNode(text))\n\n      return this\n    }\n  }\n})\n\n\nSVG.extend(SVG.Parent, {\n  // Create an element that is not described by SVG.js\n  element: function(element, inherit) {\n    return this.put(new SVG.Bare(element, inherit))\n  }\n  // Add symbol element\n, symbol: function() {\n    return this.defs().element('symbol', SVG.Container)\n  }\n\n})\nSVG.Use = SVG.invent({\n  // Initialize node\n  create: 'use'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    // Use element as a reference\n    element: function(element, file) {\n      // Set lined element\n      return this.attr('href', (file || '') + '#' + element, SVG.xlink)\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create a use element\n    use: function(element, file) {\n      return this.put(new SVG.Use).element(element, file)\n    }\n  }\n})\nSVG.Rect = SVG.invent({\n  // Initialize node\n  create: 'rect'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add parent method\n, construct: {\n    // Create a rect element\n    rect: function(width, height) {\n      return this.put(new SVG.Rect()).size(width, height)\n    }\n  }\n})\nSVG.Circle = SVG.invent({\n  // Initialize node\n  create: 'circle'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add parent method\n, construct: {\n    // Create circle element, based on ellipse\n    circle: function(size) {\n      return this.put(new SVG.Circle).rx(new SVG.Number(size).divide(2)).move(0, 0)\n    }\n  }\n})\n\nSVG.extend(SVG.Circle, SVG.FX, {\n  // Radius x value\n  rx: function(rx) {\n    return this.attr('r', rx)\n  }\n  // Alias radius x value\n, ry: function(ry) {\n    return this.rx(ry)\n  }\n})\n\nSVG.Ellipse = SVG.invent({\n  // Initialize node\n  create: 'ellipse'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add parent method\n, construct: {\n    // Create an ellipse\n    ellipse: function(width, height) {\n      return this.put(new SVG.Ellipse).size(width, height).move(0, 0)\n    }\n  }\n})\n\nSVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {\n  // Radius x value\n  rx: function(rx) {\n    return this.attr('rx', rx)\n  }\n  // Radius y value\n, ry: function(ry) {\n    return this.attr('ry', ry)\n  }\n})\n\n// Add common method\nSVG.extend(SVG.Circle, SVG.Ellipse, {\n    // Move over x-axis\n    x: function(x) {\n      return x == null ? this.cx() - this.rx() : this.cx(x + this.rx())\n    }\n    // Move over y-axis\n  , y: function(y) {\n      return y == null ? this.cy() - this.ry() : this.cy(y + this.ry())\n    }\n    // Move by center over x-axis\n  , cx: function(x) {\n      return x == null ? this.attr('cx') : this.attr('cx', x)\n    }\n    // Move by center over y-axis\n  , cy: function(y) {\n      return y == null ? this.attr('cy') : this.attr('cy', y)\n    }\n    // Set width of element\n  , width: function(width) {\n      return width == null ? this.rx() * 2 : this.rx(new SVG.Number(width).divide(2))\n    }\n    // Set height of element\n  , height: function(height) {\n      return height == null ? this.ry() * 2 : this.ry(new SVG.Number(height).divide(2))\n    }\n    // Custom size function\n  , size: function(width, height) {\n      var p = proportionalSize(this.bbox(), width, height)\n\n      return this\n        .rx(new SVG.Number(p.width).divide(2))\n        .ry(new SVG.Number(p.height).divide(2))\n    }\n})\nSVG.Line = SVG.invent({\n  // Initialize node\n  create: 'line'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    // Get array\n    array: function() {\n      return new SVG.PointArray([\n        [ this.attr('x1'), this.attr('y1') ]\n      , [ this.attr('x2'), this.attr('y2') ]\n      ])\n    }\n    // Overwrite native plot() method\n  , plot: function(x1, y1, x2, y2) {\n      if (arguments.length == 4)\n        x1 = { x1: x1, y1: y1, x2: x2, y2: y2 }\n      else\n        x1 = new SVG.PointArray(x1).toLine()\n\n      return this.attr(x1)\n    }\n    // Move by left top corner\n  , move: function(x, y) {\n      return this.attr(this.array().move(x, y).toLine())\n    }\n    // Set element size to given width and height\n  , size: function(width, height) {\n      var p = proportionalSize(this.bbox(), width, height)\n\n      return this.attr(this.array().size(p.width, p.height).toLine())\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create a line element\n    line: function(x1, y1, x2, y2) {\n      return this.put(new SVG.Line).plot(x1, y1, x2, y2)\n    }\n  }\n})\n\nSVG.Polyline = SVG.invent({\n  // Initialize node\n  create: 'polyline'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add parent method\n, construct: {\n    // Create a wrapped polyline element\n    polyline: function(p) {\n      return this.put(new SVG.Polyline).plot(p)\n    }\n  }\n})\n\nSVG.Polygon = SVG.invent({\n  // Initialize node\n  create: 'polygon'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add parent method\n, construct: {\n    // Create a wrapped polygon element\n    polygon: function(p) {\n      return this.put(new SVG.Polygon).plot(p)\n    }\n  }\n})\n\n// Add polygon-specific functions\nSVG.extend(SVG.Polyline, SVG.Polygon, {\n  // Get array\n  array: function() {\n    return this._array || (this._array = new SVG.PointArray(this.attr('points')))\n  }\n  // Plot new path\n, plot: function(p) {\n    return this.attr('points', (this._array = new SVG.PointArray(p)))\n  }\n  // Move by left top corner\n, move: function(x, y) {\n    return this.attr('points', this.array().move(x, y))\n  }\n  // Set element size to given width and height\n, size: function(width, height) {\n    var p = proportionalSize(this.bbox(), width, height)\n\n    return this.attr('points', this.array().size(p.width, p.height))\n  }\n\n})\n// unify all point to point elements\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {\n  // Define morphable array\n  morphArray:  SVG.PointArray\n  // Move by left top corner over x-axis\n, x: function(x) {\n    return x == null ? this.bbox().x : this.move(x, this.bbox().y)\n  }\n  // Move by left top corner over y-axis\n, y: function(y) {\n    return y == null ? this.bbox().y : this.move(this.bbox().x, y)\n  }\n  // Set width of element\n, width: function(width) {\n    var b = this.bbox()\n\n    return width == null ? b.width : this.size(width, b.height)\n  }\n  // Set height of element\n, height: function(height) {\n    var b = this.bbox()\n\n    return height == null ? b.height : this.size(b.width, height)\n  }\n})\nSVG.Path = SVG.invent({\n  // Initialize node\n  create: 'path'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    // Define morphable array\n    morphArray:  SVG.PathArray\n    // Get array\n  , array: function() {\n      return this._array || (this._array = new SVG.PathArray(this.attr('d')))\n    }\n    // Plot new poly points\n  , plot: function(p) {\n      return this.attr('d', (this._array = new SVG.PathArray(p)))\n    }\n    // Move by left top corner\n  , move: function(x, y) {\n      return this.attr('d', this.array().move(x, y))\n    }\n    // Move by left top corner over x-axis\n  , x: function(x) {\n      return x == null ? this.bbox().x : this.move(x, this.bbox().y)\n    }\n    // Move by left top corner over y-axis\n  , y: function(y) {\n      return y == null ? this.bbox().y : this.move(this.bbox().x, y)\n    }\n    // Set element size to given width and height\n  , size: function(width, height) {\n      var p = proportionalSize(this.bbox(), width, height)\n\n      return this.attr('d', this.array().size(p.width, p.height))\n    }\n    // Set width of element\n  , width: function(width) {\n      return width == null ? this.bbox().width : this.size(width, this.bbox().height)\n    }\n    // Set height of element\n  , height: function(height) {\n      return height == null ? this.bbox().height : this.size(this.bbox().width, height)\n    }\n\n  }\n\n  // Add parent method\n, construct: {\n    // Create a wrapped path element\n    path: function(d) {\n      return this.put(new SVG.Path).plot(d)\n    }\n  }\n})\nSVG.Image = SVG.invent({\n  // Initialize node\n  create: 'image'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    // (re)load image\n    load: function(url) {\n      if (!url) return this\n\n      var self = this\n        , img  = document.createElement('img')\n\n      // preload image\n      img.onload = function() {\n        var p = self.parent(SVG.Pattern)\n\n        // ensure image size\n        if (self.width() == 0 && self.height() == 0)\n          self.size(img.width, img.height)\n\n        // ensure pattern size if not set\n        if (p && p.width() == 0 && p.height() == 0)\n          p.size(self.width(), self.height())\n\n        // callback\n        if (typeof self._loaded === 'function')\n          self._loaded.call(self, {\n            width:  img.width\n          , height: img.height\n          , ratio:  img.width / img.height\n          , url:    url\n          })\n      }\n\n      return this.attr('href', (img.src = this.src = url), SVG.xlink)\n    }\n    // Add loaded callback\n  , loaded: function(loaded) {\n      this._loaded = loaded\n      return this\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // create image element, load image and set its size\n    image: function(source, width, height) {\n      return this.put(new SVG.Image).load(source).size(width || 0, height || width || 0)\n    }\n  }\n\n})\nSVG.Text = SVG.invent({\n  // Initialize node\n  create: function() {\n    this.constructor.call(this, SVG.create('text'))\n\n    this.dom.leading = new SVG.Number(1.3)    // store leading value for rebuilding\n    this._rebuild = true                      // enable automatic updating of dy values\n    this._build   = false                     // disable build mode for adding multiple lines\n\n    // set default font\n    this.attr('font-family', SVG.defaults.attrs['font-family'])\n  }\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    clone: function(){\n      // clone element and assign new id\n      var clone = assignNewId(this.node.cloneNode(true))\n\n      // insert the clone after myself\n      this.after(clone)\n\n      return clone\n    }\n    // Move over x-axis\n  , x: function(x) {\n      // act as getter\n      if (x == null)\n        return this.attr('x')\n\n      // move lines as well if no textPath is present\n      if (!this.textPath)\n        this.lines().each(function() { if (this.dom.newLined) this.x(x) })\n\n      return this.attr('x', x)\n    }\n    // Move over y-axis\n  , y: function(y) {\n      var oy = this.attr('y')\n        , o  = typeof oy === 'number' ? oy - this.bbox().y : 0\n\n      // act as getter\n      if (y == null)\n        return typeof oy === 'number' ? oy - o : oy\n\n      return this.attr('y', typeof y === 'number' ? y + o : y)\n    }\n    // Move center over x-axis\n  , cx: function(x) {\n      return x == null ? this.bbox().cx : this.x(x - this.bbox().width / 2)\n    }\n    // Move center over y-axis\n  , cy: function(y) {\n      return y == null ? this.bbox().cy : this.y(y - this.bbox().height / 2)\n    }\n    // Set the text content\n  , text: function(text) {\n      // act as getter\n      if (typeof text === 'undefined'){\n        var text = ''\n        var children = this.node.childNodes\n        for(var i = 0, len = children.length; i < len; ++i){\n\n          // add newline if its not the first child and newLined is set to true\n          if(i != 0 && children[i].nodeType != 3 && SVG.adopt(children[i]).dom.newLined == true){\n            text += '\\n'\n          }\n\n          // add content of this node\n          text += children[i].textContent\n        }\n\n        return text\n      }\n\n      // remove existing content\n      this.clear().build(true)\n\n      if (typeof text === 'function') {\n        // call block\n        text.call(this, this)\n\n      } else {\n        // store text and make sure text is not blank\n        text = text.split('\\n')\n\n        // build new lines\n        for (var i = 0, il = text.length; i < il; i++)\n          this.tspan(text[i]).newLine()\n      }\n\n      // disable build mode and rebuild lines\n      return this.build(false).rebuild()\n    }\n    // Set font size\n  , size: function(size) {\n      return this.attr('font-size', size).rebuild()\n    }\n    // Set / get leading\n  , leading: function(value) {\n      // act as getter\n      if (value == null)\n        return this.dom.leading\n\n      // act as setter\n      this.dom.leading = new SVG.Number(value)\n\n      return this.rebuild()\n    }\n    // Get all the first level lines\n  , lines: function() {\n      // filter tspans and map them to SVG.js instances\n      var lines = SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function(el){\n        return SVG.adopt(el)\n      })\n\n      // return an instance of SVG.set\n      return new SVG.Set(lines)\n    }\n    // Rebuild appearance type\n  , rebuild: function(rebuild) {\n      // store new rebuild flag if given\n      if (typeof rebuild == 'boolean')\n        this._rebuild = rebuild\n\n      // define position of all lines\n      if (this._rebuild) {\n        var self = this\n\n        this.lines().each(function() {\n          if (this.dom.newLined) {\n            if (!this.textPath)\n              this.attr('x', self.attr('x'))\n\n            this.attr('dy', self.dom.leading * new SVG.Number(self.attr('font-size')))\n          }\n        })\n\n        this.fire('rebuild')\n      }\n\n      return this\n    }\n    // Enable / disable build mode\n  , build: function(build) {\n      this._build = !!build\n      return this\n    }\n    // overwrite method from parent to set data properly\n  , setData: function(o){\n      this.dom = o\n      this.dom.leading = o.leading ? new SVG.Number(o.leading.value, o.leading.unit) : new SVG.Number(1.3)\n      return this\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create text element\n    text: function(text) {\n      return this.put(new SVG.Text).text(text)\n    }\n    // Create plain text element\n  , plain: function(text) {\n      return this.put(new SVG.Text).plain(text)\n    }\n  }\n\n})\n\nSVG.Tspan = SVG.invent({\n  // Initialize node\n  create: 'tspan'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    // Set text content\n    text: function(text) {\n      typeof text === 'function' ? text.call(this, this) : this.plain(text)\n\n      return this\n    }\n    // Shortcut dx\n  , dx: function(dx) {\n      return this.attr('dx', dx)\n    }\n    // Shortcut dy\n  , dy: function(dy) {\n      return this.attr('dy', dy)\n    }\n    // Create new line\n  , newLine: function() {\n      // fetch text parent\n      var t = this.parent(SVG.Text)\n\n      // mark new line\n      this.dom.newLined = true\n\n      // apply new hy¡n\n      return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x())\n    }\n  }\n\n})\n\nSVG.extend(SVG.Text, SVG.Tspan, {\n  // Create plain text node\n  plain: function(text) {\n    // clear if build mode is disabled\n    if (this._build === false)\n      this.clear()\n\n    // create text node\n    this.node.appendChild(document.createTextNode(text))\n\n    return this\n  }\n  // Create a tspan\n, tspan: function(text) {\n    var node  = (this.textPath && this.textPath() || this).node\n      , tspan = new SVG.Tspan\n\n    // clear if build mode is disabled\n    if (this._build === false)\n      this.clear()\n\n    // add new tspan\n    node.appendChild(tspan.node)\n\n    return tspan.text(text)\n  }\n  // Clear all lines\n, clear: function() {\n    var node = (this.textPath && this.textPath() || this).node\n\n    // remove existing child nodes\n    while (node.hasChildNodes())\n      node.removeChild(node.lastChild)\n\n    return this\n  }\n  // Get length of text element\n, length: function() {\n    return this.node.getComputedTextLength()\n  }\n})\n\nSVG.TextPath = SVG.invent({\n  // Initialize node\n  create: 'textPath'\n\n  // Inherit from\n, inherit: SVG.Element\n\n  // Define parent class\n, parent: SVG.Text\n\n  // Add parent method\n, construct: {\n    // Create path for text to run on\n    path: function(d) {\n      // create textPath element\n      var path  = new SVG.TextPath\n        , track = this.doc().defs().path(d)\n\n      // move lines to textpath\n      while (this.node.hasChildNodes())\n        path.node.appendChild(this.node.firstChild)\n\n      // add textPath element as child node\n      this.node.appendChild(path.node)\n\n      // link textPath to path and add content\n      path.attr('href', '#' + track, SVG.xlink)\n\n      return this\n    }\n    // Plot path if any\n  , plot: function(d) {\n      var track = this.track()\n\n      if (track)\n        track.plot(d)\n\n      return this\n    }\n    // Get the path track element\n  , track: function() {\n      var path = this.textPath()\n\n      if (path)\n        return path.reference('href')\n    }\n    // Get the textPath child\n  , textPath: function() {\n      if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath')\n        return SVG.adopt(this.node.firstChild)\n    }\n  }\n})\nSVG.Nested = SVG.invent({\n  // Initialize node\n  create: function() {\n    this.constructor.call(this, SVG.create('svg'))\n\n    this.style('overflow', 'visible')\n  }\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add parent method\n, construct: {\n    // Create nested svg document\n    nested: function() {\n      return this.put(new SVG.Nested)\n    }\n  }\n})\nSVG.A = SVG.invent({\n  // Initialize node\n  create: 'a'\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Link url\n    to: function(url) {\n      return this.attr('href', url, SVG.xlink)\n    }\n    // Link show attribute\n  , show: function(target) {\n      return this.attr('show', target, SVG.xlink)\n    }\n    // Link target attribute\n  , target: function(target) {\n      return this.attr('target', target)\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create a hyperlink element\n    link: function(url) {\n      return this.put(new SVG.A).to(url)\n    }\n  }\n})\n\nSVG.extend(SVG.Element, {\n  // Create a hyperlink element\n  linkTo: function(url) {\n    var link = new SVG.A\n\n    if (typeof url == 'function')\n      url.call(link, link)\n    else\n      link.to(url)\n\n    return this.parent().put(link).put(this)\n  }\n\n})\nSVG.Marker = SVG.invent({\n  // Initialize node\n  create: 'marker'\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Set width of element\n    width: function(width) {\n      return this.attr('markerWidth', width)\n    }\n    // Set height of element\n  , height: function(height) {\n      return this.attr('markerHeight', height)\n    }\n    // Set marker refX and refY\n  , ref: function(x, y) {\n      return this.attr('refX', x).attr('refY', y)\n    }\n    // Update marker\n  , update: function(block) {\n      // remove all content\n      this.clear()\n\n      // invoke passed block\n      if (typeof block == 'function')\n        block.call(this, this)\n\n      return this\n    }\n    // Return the fill id\n  , toString: function() {\n      return 'url(#' + this.id() + ')'\n    }\n  }\n\n  // Add parent method\n, construct: {\n    marker: function(width, height, block) {\n      // Create marker element in defs\n      return this.defs().marker(width, height, block)\n    }\n  }\n\n})\n\nSVG.extend(SVG.Defs, {\n  // Create marker\n  marker: function(width, height, block) {\n    // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\n    return this.put(new SVG.Marker)\n      .size(width, height)\n      .ref(width / 2, height / 2)\n      .viewbox(0, 0, width, height)\n      .attr('orient', 'auto')\n      .update(block)\n  }\n\n})\n\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, SVG.Path, {\n  // Create and attach markers\n  marker: function(marker, width, height, block) {\n    var attr = ['marker']\n\n    // Build attribute name\n    if (marker != 'all') attr.push(marker)\n    attr = attr.join('-')\n\n    // Set marker attribute\n    marker = arguments[1] instanceof SVG.Marker ?\n      arguments[1] :\n      this.doc().marker(width, height, block)\n\n    return this.attr(attr, marker)\n  }\n\n})\n// Define list of available attributes for stroke and fill\nvar sugar = {\n  stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset']\n, fill:   ['color', 'opacity', 'rule']\n, prefix: function(t, a) {\n    return a == 'color' ? t : t + '-' + a\n  }\n}\n\n// Add sugar for fill and stroke\n;['fill', 'stroke'].forEach(function(m) {\n  var i, extension = {}\n\n  extension[m] = function(o) {\n    if (typeof o == 'string' || SVG.Color.isRgb(o) || (o && typeof o.fill === 'function'))\n      this.attr(m, o)\n\n    else\n      // set all attributes from sugar.fill and sugar.stroke list\n      for (i = sugar[m].length - 1; i >= 0; i--)\n        if (o[sugar[m][i]] != null)\n          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]])\n\n    return this\n  }\n\n  SVG.extend(SVG.Element, SVG.FX, extension)\n\n})\n\nSVG.extend(SVG.Element, SVG.FX, {\n  // Map rotation to transform\n  rotate: function(d, cx, cy) {\n    return this.transform({ rotation: d, cx: cx, cy: cy })\n  }\n  // Map skew to transform\n, skew: function(x, y, cx, cy) {\n    return this.transform({ skewX: x, skewY: y, cx: cx, cy: cy })\n  }\n  // Map scale to transform\n, scale: function(x, y, cx, cy) {\n    return arguments.length == 1  || arguments.length == 3 ?\n      this.transform({ scale: x, cx: y, cy: cx }) :\n      this.transform({ scaleX: x, scaleY: y, cx: cx, cy: cy })\n  }\n  // Map translate to transform\n, translate: function(x, y) {\n    return this.transform({ x: x, y: y })\n  }\n  // Map flip to transform\n, flip: function(a, o) {\n    return this.transform({ flip: a, offset: o })\n  }\n  // Map matrix to transform\n, matrix: function(m) {\n    return this.attr('transform', new SVG.Matrix(m))\n  }\n  // Opacity\n, opacity: function(value) {\n    return this.attr('opacity', value)\n  }\n  // Relative move over x axis\n, dx: function(x) {\n    return this.x((this.target || this).x() + x)\n  }\n  // Relative move over y axis\n, dy: function(y) {\n    return this.y((this.target || this).y() + y)\n  }\n  // Relative move over x and y axes\n, dmove: function(x, y) {\n    return this.dx(x).dy(y)\n  }\n})\n\nSVG.extend(SVG.Rect, SVG.Ellipse, SVG.Circle, SVG.Gradient, SVG.FX, {\n  // Add x and y radius\n  radius: function(x, y) {\n    var type = (this.target || this).type;\n    return type == 'radial' || type == 'circle' ?\n      this.attr({ 'r': new SVG.Number(x) }) :\n      this.rx(x).ry(y == null ? x : y)\n  }\n})\n\nSVG.extend(SVG.Path, {\n  // Get path length\n  length: function() {\n    return this.node.getTotalLength()\n  }\n  // Get point at length\n, pointAt: function(length) {\n    return this.node.getPointAtLength(length)\n  }\n})\n\nSVG.extend(SVG.Parent, SVG.Text, SVG.FX, {\n  // Set font\n  font: function(o) {\n    for (var k in o)\n      k == 'leading' ?\n        this.leading(o[k]) :\n      k == 'anchor' ?\n        this.attr('text-anchor', o[k]) :\n      k == 'size' || k == 'family' || k == 'weight' || k == 'stretch' || k == 'variant' || k == 'style' ?\n        this.attr('font-'+ k, o[k]) :\n        this.attr(k, o[k])\n\n    return this\n  }\n})\n\n\nSVG.Set = SVG.invent({\n  // Initialize\n  create: function(members) {\n    // Set initial state\n    Array.isArray(members) ? this.members = members : this.clear()\n  }\n\n  // Add class methods\n, extend: {\n    // Add element to set\n    add: function() {\n      var i, il, elements = [].slice.call(arguments)\n\n      for (i = 0, il = elements.length; i < il; i++)\n        this.members.push(elements[i])\n\n      return this\n    }\n    // Remove element from set\n  , remove: function(element) {\n      var i = this.index(element)\n\n      // remove given child\n      if (i > -1)\n        this.members.splice(i, 1)\n\n      return this\n    }\n    // Iterate over all members\n  , each: function(block) {\n      for (var i = 0, il = this.members.length; i < il; i++)\n        block.apply(this.members[i], [i, this.members])\n\n      return this\n    }\n    // Restore to defaults\n  , clear: function() {\n      // initialize store\n      this.members = []\n\n      return this\n    }\n    // Get the length of a set\n  , length: function() {\n      return this.members.length\n    }\n    // Checks if a given element is present in set\n  , has: function(element) {\n      return this.index(element) >= 0\n    }\n    // retuns index of given element in set\n  , index: function(element) {\n      return this.members.indexOf(element)\n    }\n    // Get member at given index\n  , get: function(i) {\n      return this.members[i]\n    }\n    // Get first member\n  , first: function() {\n      return this.get(0)\n    }\n    // Get last member\n  , last: function() {\n      return this.get(this.members.length - 1)\n    }\n    // Default value\n  , valueOf: function() {\n      return this.members\n    }\n    // Get the bounding box of all members included or empty box if set has no items\n  , bbox: function(){\n      var box = new SVG.BBox()\n\n      // return an empty box of there are no members\n      if (this.members.length == 0)\n        return box\n\n      // get the first rbox and update the target bbox\n      var rbox = this.members[0].rbox()\n      box.x      = rbox.x\n      box.y      = rbox.y\n      box.width  = rbox.width\n      box.height = rbox.height\n\n      this.each(function() {\n        // user rbox for correct position and visual representation\n        box = box.merge(this.rbox())\n      })\n\n      return box\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create a new set\n    set: function(members) {\n      return new SVG.Set(members)\n    }\n  }\n})\n\nSVG.FX.Set = SVG.invent({\n  // Initialize node\n  create: function(set) {\n    // store reference to set\n    this.set = set\n  }\n\n})\n\n// Alias methods\nSVG.Set.inherit = function() {\n  var m\n    , methods = []\n\n  // gather shape methods\n  for(var m in SVG.Shape.prototype)\n    if (typeof SVG.Shape.prototype[m] == 'function' && typeof SVG.Set.prototype[m] != 'function')\n      methods.push(m)\n\n  // apply shape aliasses\n  methods.forEach(function(method) {\n    SVG.Set.prototype[method] = function() {\n      for (var i = 0, il = this.members.length; i < il; i++)\n        if (this.members[i] && typeof this.members[i][method] == 'function')\n          this.members[i][method].apply(this.members[i], arguments)\n\n      return method == 'animate' ? (this.fx || (this.fx = new SVG.FX.Set(this))) : this\n    }\n  })\n\n  // clear methods for the next round\n  methods = []\n\n  // gather fx methods\n  for(var m in SVG.FX.prototype)\n    if (typeof SVG.FX.prototype[m] == 'function' && typeof SVG.FX.Set.prototype[m] != 'function')\n      methods.push(m)\n\n  // apply fx aliasses\n  methods.forEach(function(method) {\n    SVG.FX.Set.prototype[method] = function() {\n      for (var i = 0, il = this.set.members.length; i < il; i++)\n        this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments)\n\n      return this\n    }\n  })\n}\n\n\n\n\nSVG.extend(SVG.Element, {\n  // Store data values on svg nodes\n  data: function(a, v, r) {\n    if (typeof a == 'object') {\n      for (v in a)\n        this.data(v, a[v])\n\n    } else if (arguments.length < 2) {\n      try {\n        return JSON.parse(this.attr('data-' + a))\n      } catch(e) {\n        return this.attr('data-' + a)\n      }\n\n    } else {\n      this.attr(\n        'data-' + a\n      , v === null ?\n          null :\n        r === true || typeof v === 'string' || typeof v === 'number' ?\n          v :\n          JSON.stringify(v)\n      )\n    }\n\n    return this\n  }\n})\nSVG.extend(SVG.Element, {\n  // Remember arbitrary data\n  remember: function(k, v) {\n    // remember every item in an object individually\n    if (typeof arguments[0] == 'object')\n      for (var v in k)\n        this.remember(v, k[v])\n\n    // retrieve memory\n    else if (arguments.length == 1)\n      return this.memory()[k]\n\n    // store memory\n    else\n      this.memory()[k] = v\n\n    return this\n  }\n\n  // Erase a given memory\n, forget: function() {\n    if (arguments.length == 0)\n      this._memory = {}\n    else\n      for (var i = arguments.length - 1; i >= 0; i--)\n        delete this.memory()[arguments[i]]\n\n    return this\n  }\n\n  // Initialize or return local memory object\n, memory: function() {\n    return this._memory || (this._memory = {})\n  }\n\n})\n// Method for getting an element by id\nSVG.get = function(id) {\n  var node = document.getElementById(idFromReference(id) || id)\n  return SVG.adopt(node)\n}\n\n// Select elements by query string\nSVG.select = function(query, parent) {\n  return new SVG.Set(\n    SVG.utils.map((parent || document).querySelectorAll(query), function(node) {\n      return SVG.adopt(node)\n    })\n  )\n}\n\nSVG.extend(SVG.Parent, {\n  // Scoped select method\n  select: function(query) {\n    return SVG.select(query, this.node)\n  }\n\n})\n// tests if a given selector matches an element\nfunction matches(el, selector) {\n  return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\n}\n\n// Convert dash-separated-string to camelCase\nfunction camelCase(s) {\n  return s.toLowerCase().replace(/-(.)/g, function(m, g) {\n    return g.toUpperCase()\n  })\n}\n\n// Capitalize first letter of a string\nfunction capitalize(s) {\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\n// Ensure to six-based hex\nfunction fullHex(hex) {\n  return hex.length == 4 ?\n    [ '#',\n      hex.substring(1, 2), hex.substring(1, 2)\n    , hex.substring(2, 3), hex.substring(2, 3)\n    , hex.substring(3, 4), hex.substring(3, 4)\n    ].join('') : hex\n}\n\n// Component to hex value\nfunction compToHex(comp) {\n  var hex = comp.toString(16)\n  return hex.length == 1 ? '0' + hex : hex\n}\n\n// Calculate proportional width and height values when necessary\nfunction proportionalSize(box, width, height) {\n  if (height == null)\n    height = box.height / box.width * width\n  else if (width == null)\n    width = box.width / box.height * height\n\n  return {\n    width:  width\n  , height: height\n  }\n}\n\n// Delta transform point\nfunction deltaTransformPoint(matrix, x, y) {\n  return {\n    x: x * matrix.a + y * matrix.c + 0\n  , y: x * matrix.b + y * matrix.d + 0\n  }\n}\n\n// Map matrix array to object\nfunction arrayToMatrix(a) {\n  return { a: a[0], b: a[1], c: a[2], d: a[3], e: a[4], f: a[5] }\n}\n\n// Parse matrix if required\nfunction parseMatrix(matrix) {\n  if (!(matrix instanceof SVG.Matrix))\n    matrix = new SVG.Matrix(matrix)\n\n  return matrix\n}\n\n// Add centre point to transform object\nfunction ensureCentre(o, target) {\n  o.cx = o.cx == null ? target.bbox().cx : o.cx\n  o.cy = o.cy == null ? target.bbox().cy : o.cy\n}\n\n// Convert string to matrix\nfunction stringToMatrix(source) {\n  // remove matrix wrapper and split to individual numbers\n  source = source\n    .replace(SVG.regex.whitespace, '')\n    .replace(SVG.regex.matrix, '')\n    .split(SVG.regex.matrixElements)\n\n  // convert string values to floats and convert to a matrix-formatted object\n  return arrayToMatrix(\n    SVG.utils.map(source, function(n) {\n      return parseFloat(n)\n    })\n  )\n}\n\n// Calculate position according to from and to\nfunction at(o, pos) {\n  // number recalculation (don't bother converting to SVG.Number for performance reasons)\n  return typeof o.from == 'number' ?\n    o.from + (o.to - o.from) * pos :\n\n  // instance recalculation\n  o instanceof SVG.Color || o instanceof SVG.Number || o instanceof SVG.Matrix ? o.at(pos) :\n\n  // for all other values wait until pos has reached 1 to return the final value\n  pos < 1 ? o.from : o.to\n}\n\n// PathArray Helpers\nfunction arrayToString(a) {\n  for (var i = 0, il = a.length, s = ''; i < il; i++) {\n    s += a[i][0]\n\n    if (a[i][1] != null) {\n      s += a[i][1]\n\n      if (a[i][2] != null) {\n        s += ' '\n        s += a[i][2]\n\n        if (a[i][3] != null) {\n          s += ' '\n          s += a[i][3]\n          s += ' '\n          s += a[i][4]\n\n          if (a[i][5] != null) {\n            s += ' '\n            s += a[i][5]\n            s += ' '\n            s += a[i][6]\n\n            if (a[i][7] != null) {\n              s += ' '\n              s += a[i][7]\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return s + ' '\n}\n\n// Deep new id assignment\nfunction assignNewId(node) {\n  // do the same for SVG child nodes as well\n  for (var i = node.childNodes.length - 1; i >= 0; i--)\n    if (node.childNodes[i] instanceof SVGElement)\n      assignNewId(node.childNodes[i])\n\n  return SVG.adopt(node).id(SVG.eid(node.nodeName))\n}\n\n// Add more bounding box properties\nfunction fullBox(b) {\n  if (b.x == null) {\n    b.x      = 0\n    b.y      = 0\n    b.width  = 0\n    b.height = 0\n  }\n\n  b.w  = b.width\n  b.h  = b.height\n  b.x2 = b.x + b.width\n  b.y2 = b.y + b.height\n  b.cx = b.x + b.width / 2\n  b.cy = b.y + b.height / 2\n\n  return b\n}\n\n// Get id from reference string\nfunction idFromReference(url) {\n  var m = url.toString().match(SVG.regex.reference)\n\n  if (m) return m[1]\n}\n\n// Create matrix array for looping\nvar abcdef = 'abcdef'.split('')\n// Add CustomEvent to IE9 and IE10\nif (typeof CustomEvent !== 'function') {\n  // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\n  var CustomEvent = function(event, options) {\n    options = options || { bubbles: false, cancelable: false, detail: undefined }\n    var e = document.createEvent('CustomEvent')\n    e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail)\n    return e\n  }\n\n  CustomEvent.prototype = window.Event.prototype\n\n  window.CustomEvent = CustomEvent\n}\n\n// requestAnimationFrame / cancelAnimationFrame Polyfill with fallback based on Paul Irish\n(function(w) {\n  var lastTime = 0\n  var vendors = ['moz', 'webkit']\n\n  for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n    w.requestAnimationFrame = w[vendors[x] + 'RequestAnimationFrame']\n    w.cancelAnimationFrame  = w[vendors[x] + 'CancelAnimationFrame'] ||\n                              w[vendors[x] + 'CancelRequestAnimationFrame']\n  }\n\n  w.requestAnimationFrame = w.requestAnimationFrame ||\n    function(callback) {\n      var currTime = new Date().getTime()\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime))\n\n      var id = w.setTimeout(function() {\n        callback(currTime + timeToCall)\n      }, timeToCall)\n\n      lastTime = currTime + timeToCall\n      return id\n    }\n\n  w.cancelAnimationFrame = w.cancelAnimationFrame || w.clearTimeout;\n\n}(window))\n\nreturn SVG\n\n}));","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        len = arguments.length;\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n      args[i - 1] = arguments[i];\n\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    var m;\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (isFunction(emitter._events[type]))\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","//     Underscore.js 1.9.1\n//     http://underscorejs.org\n//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` (`self`) in the browser, `global`\n  // on the server, or `this` in some virtual machines. We use `self`\n  // instead of `window` for `WebWorker` support.\n  var root = typeof self == 'object' && self.self === self && self ||\n            typeof global == 'object' && global.global === global && global ||\n            this ||\n            {};\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype;\n  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var push = ArrayProto.push,\n      slice = ArrayProto.slice,\n      toString = ObjProto.toString,\n      hasOwnProperty = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var nativeIsArray = Array.isArray,\n      nativeKeys = Object.keys,\n      nativeCreate = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for their old module API. If we're in\n  // the browser, add `_` as a global object.\n  // (`nodeType` is checked to ensure that `module`\n  // and `exports` are not HTML elements.)\n  if (typeof exports != 'undefined' && !exports.nodeType) {\n    if (typeof module != 'undefined' && !module.nodeType && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.9.1';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      // The 2-argument case is omitted because we’re not using it.\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  var builtinIteratee;\n\n  // An internal function to generate callbacks that can be applied to each\n  // element in a collection, returning the desired result — either `identity`,\n  // an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);\n    return _.property(value);\n  };\n\n  // External wrapper for our callback generator. Users may customize\n  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.\n  // This abstraction hides the internal-only argCount argument.\n  _.iteratee = builtinIteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // Some functions take a variable number of arguments, or a few expected\n  // arguments at the beginning and then a variable number of values to operate\n  // on. This helper accumulates all remaining arguments past the function’s\n  // argument length (or an explicit `startIndex`), into an array that becomes\n  // the last argument. Similar to ES6’s \"rest parameter\".\n  var restArguments = function(func, startIndex) {\n    startIndex = startIndex == null ? func.length - 1 : +startIndex;\n    return function() {\n      var length = Math.max(arguments.length - startIndex, 0),\n          rest = Array(length),\n          index = 0;\n      for (; index < length; index++) {\n        rest[index] = arguments[index + startIndex];\n      }\n      switch (startIndex) {\n        case 0: return func.call(this, rest);\n        case 1: return func.call(this, arguments[0], rest);\n        case 2: return func.call(this, arguments[0], arguments[1], rest);\n      }\n      var args = Array(startIndex + 1);\n      for (index = 0; index < startIndex; index++) {\n        args[index] = arguments[index];\n      }\n      args[startIndex] = rest;\n      return func.apply(this, args);\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var shallowProperty = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  var has = function(obj, path) {\n    return obj != null && hasOwnProperty.call(obj, path);\n  }\n\n  var deepGet = function(obj, path) {\n    var length = path.length;\n    for (var i = 0; i < length; i++) {\n      if (obj == null) return void 0;\n      obj = obj[path[i]];\n    }\n    return length ? obj : void 0;\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object.\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = shallowProperty('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  var createReduce = function(dir) {\n    // Wrap code that reassigns argument variables in a separate function than\n    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\n    var reducer = function(obj, iteratee, memo, initial) {\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      if (!initial) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    };\n\n    return function(obj, iteratee, memo, context) {\n      var initial = arguments.length >= 3;\n      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\n    };\n  };\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;\n    var key = keyFinder(obj, predicate, context);\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = restArguments(function(obj, path, args) {\n    var contextPath, func;\n    if (_.isFunction(path)) {\n      func = path;\n    } else if (_.isArray(path)) {\n      contextPath = path.slice(0, -1);\n      path = path[path.length - 1];\n    }\n    return _.map(obj, function(context) {\n      var method = func;\n      if (!method) {\n        if (contextPath && contextPath.length) {\n          context = deepGet(context, contextPath);\n        }\n        if (context == null) return void 0;\n        method = context[path];\n      }\n      return method == null ? method : method.apply(context, args);\n    });\n  });\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value != null && value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(v, index, list) {\n        computed = iteratee(v, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value != null && value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(v, index, list) {\n        computed = iteratee(v, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection.\n  _.shuffle = function(obj) {\n    return _.sample(obj, Infinity);\n  };\n\n  // Sample **n** random values from a collection using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);\n    var length = getLength(sample);\n    n = Math.max(Math.min(n, length), 0);\n    var last = length - 1;\n    for (var index = 0; index < n; index++) {\n      var rand = _.random(index, last);\n      var temp = sample[index];\n      sample[index] = sample[rand];\n      sample[rand] = temp;\n    }\n    return sample.slice(0, n);\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    var index = 0;\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, key, list) {\n      return {\n        value: value,\n        index: index++,\n        criteria: iteratee(value, key, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior, partition) {\n    return function(obj, iteratee, context) {\n      var result = partition ? [[], []] : {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  var reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (_.isString(obj)) {\n      // Keep surrogate pair characters together\n      return obj.match(reStrSymbol);\n    }\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = group(function(result, value, pass) {\n    result[pass ? 0 : 1].push(value);\n  }, true);\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null || array.length < 1) return n == null ? void 0 : [];\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null || array.length < 1) return n == null ? void 0 : [];\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, Boolean);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, output) {\n    output = output || [];\n    var idx = output.length;\n    for (var i = 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        // Flatten current level of array or arguments object.\n        if (shallow) {\n          var j = 0, len = value.length;\n          while (j < len) output[idx++] = value[j++];\n        } else {\n          flatten(value, shallow, strict, output);\n          idx = output.length;\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = restArguments(function(array, otherArrays) {\n    return _.difference(array, otherArrays);\n  });\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // The faster algorithm will not work with an iteratee if the iteratee\n  // is not a one-to-one function, so providing an iteratee will disable\n  // the faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted && !iteratee) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = restArguments(function(arrays) {\n    return _.uniq(flatten(arrays, true, true));\n  });\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      var j;\n      for (j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = restArguments(function(array, rest) {\n    rest = flatten(rest, true, true);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  });\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices.\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = restArguments(_.unzip);\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values. Passing by pairs is the reverse of _.pairs.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions.\n  var createPredicateIndexFinder = function(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  };\n\n  // Returns the first index on an array-like that passes a predicate test.\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions.\n  var createIndexFinder = function(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n          i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  };\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    if (!step) {\n      step = stop < start ? -1 : 1;\n    }\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Chunk a single array into multiple arrays, each containing `count` or fewer\n  // items.\n  _.chunk = function(array, count) {\n    if (count == null || count < 1) return [];\n    var result = [];\n    var i = 0, length = array.length;\n    while (i < length) {\n      result.push(slice.call(array, i, i += count));\n    }\n    return result;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments.\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = restArguments(function(func, context, args) {\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var bound = restArguments(function(callArgs) {\n      return executeBound(func, bound, context, this, args.concat(callArgs));\n    });\n    return bound;\n  });\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder by default, allowing any combination of arguments to be\n  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\n  _.partial = restArguments(function(func, boundArgs) {\n    var placeholder = _.partial.placeholder;\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  });\n\n  _.partial.placeholder = _;\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = restArguments(function(obj, keys) {\n    keys = flatten(keys, false, false);\n    var index = keys.length;\n    if (index < 1) throw new Error('bindAll must be passed function names');\n    while (index--) {\n      var key = keys[index];\n      obj[key] = _.bind(obj[key], obj);\n    }\n  });\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = restArguments(function(func, wait, args) {\n    return setTimeout(function() {\n      return func.apply(null, args);\n    }, wait);\n  });\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var timeout, context, args, result;\n    var previous = 0;\n    if (!options) options = {};\n\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n\n    var throttled = function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n\n    throttled.cancel = function() {\n      clearTimeout(timeout);\n      previous = 0;\n      timeout = context = args = null;\n    };\n\n    return throttled;\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, result;\n\n    var later = function(context, args) {\n      timeout = null;\n      if (args) result = func.apply(context, args);\n    };\n\n    var debounced = restArguments(function(args) {\n      if (timeout) clearTimeout(timeout);\n      if (immediate) {\n        var callNow = !timeout;\n        timeout = setTimeout(later, wait);\n        if (callNow) result = func.apply(this, args);\n      } else {\n        timeout = _.delay(later, wait, this, args);\n      }\n\n      return result;\n    });\n\n    debounced.cancel = function() {\n      clearTimeout(timeout);\n      timeout = null;\n    };\n\n    return debounced;\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  _.restArguments = restArguments;\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  var collectNonEnumProps = function(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  };\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`.\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object.\n  // In contrast to _.map it returns an object.\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = _.keys(obj),\n        length = keys.length,\n        results = {};\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys[index];\n      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  // The opposite of _.object.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`.\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, defaults) {\n    return function(obj) {\n      var length = arguments.length;\n      if (defaults) obj = Object(obj);\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!defaults || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s).\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test.\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Internal pick helper function to determine if `obj` has key `key`.\n  var keyInObj = function(value, key, obj) {\n    return key in obj;\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = restArguments(function(obj, keys) {\n    var result = {}, iteratee = keys[0];\n    if (obj == null) return result;\n    if (_.isFunction(iteratee)) {\n      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);\n      keys = _.allKeys(obj);\n    } else {\n      iteratee = keyInObj;\n      keys = flatten(keys, false, false);\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  });\n\n  // Return a copy of the object without the blacklisted properties.\n  _.omit = restArguments(function(obj, keys) {\n    var iteratee = keys[0], context;\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n      if (keys.length > 1) context = keys[1];\n    } else {\n      keys = _.map(flatten(keys, false, false), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  });\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq, deepEq;\n  eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // `null` or `undefined` only equal to itself (strict comparison).\n    if (a == null || b == null) return false;\n    // `NaN`s are equivalent, but non-reflexive.\n    if (a !== a) return b !== b;\n    // Exhaust primitive checks\n    var type = typeof a;\n    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n    return deepEq(a, b, aStack, bStack);\n  };\n\n  // Internal recursive comparison function for `isEqual`.\n  deepEq = function(a, b, aStack, bStack) {\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN.\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n      case '[object Symbol]':\n        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\n  var nodelist = root.document && root.document.childNodes;\n  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`?\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && isNaN(obj);\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, path) {\n    if (!_.isArray(path)) {\n      return has(obj, path);\n    }\n    var length = path.length;\n    for (var i = 0; i < length; i++) {\n      var key = path[i];\n      if (obj == null || !hasOwnProperty.call(obj, key)) {\n        return false;\n      }\n      obj = obj[key];\n    }\n    return !!length;\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  // Creates a function that, when passed an object, will traverse that object’s\n  // properties down the given `path`, specified as an array of keys or indexes.\n  _.property = function(path) {\n    if (!_.isArray(path)) {\n      return shallowProperty(path);\n    }\n    return function(obj) {\n      return deepGet(obj, path);\n    };\n  };\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    if (obj == null) {\n      return function(){};\n    }\n    return function(path) {\n      return !_.isArray(path) ? obj[path] : deepGet(obj, path);\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n  // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped.\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // Traverses the children of `obj` along `path`. If a child is a function, it\n  // is invoked with its parent as context. Returns the value of the final\n  // child, or `fallback` if any child is undefined.\n  _.result = function(obj, path, fallback) {\n    if (!_.isArray(path)) path = [path];\n    var length = path.length;\n    if (!length) {\n      return _.isFunction(fallback) ? fallback.call(obj) : fallback;\n    }\n    for (var i = 0; i < length; i++) {\n      var prop = obj == null ? void 0 : obj[path[i]];\n      if (prop === void 0) {\n        prop = fallback;\n        i = length; // Ensure we don't continue iterating.\n      }\n      obj = _.isFunction(prop) ? prop.call(obj) : prop;\n    }\n    return obj;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate: /<%([\\s\\S]+?)%>/g,\n    interpolate: /<%=([\\s\\S]+?)%>/g,\n    escape: /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\": \"'\",\n    '\\\\': '\\\\',\n    '\\r': 'r',\n    '\\n': 'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offset.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    var render;\n    try {\n      render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var chainResult = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return chainResult(this, func.apply(_, args));\n      };\n    });\n    return _;\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return chainResult(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return chainResult(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return String(this._wrapped);\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define == 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}());\n","var {D,B,H} = require('consts');\ndescribe(\"Sample test\", () => {\n  describe(\"basics\", () => {\n    it(\"is working\", () => {\n      expect(true).to.equal(true);\n    });\n    it(\"can import\", () => {\n      expect(D.EAST).not.to.be(undefined);\n    });\n  });\n  describe(\"hooks\", () =>{\n    var a=0;\n    before(() => {\n      a+=1;\n    });\n    it(\"run before block\", () => {\n      expect(a).to.be(1);\n    })\n    it(\"run before block twice\", () => {\n      expect(a).to.be(1);\n    })\n  })\n});\n\n","const {D,B,H} = require('consts');\nconst map = require('map');\nconst Game = require('game');\nconst _ = require('underscore');\nconst {\n  validateSnake,\n} = require('./validators');\ndescribe(\"Game\", () => {\n  var game;\n  var cmds = {\n    \"j222\":[\n      \"join\",\n      {\n        \"name\": \"j22\",\n        \"remain\":2,\n        \"x\":2,\n        \"y\":2,\n      }\n    ],\n    \"j242\":[\n      \"join\",\n      {\n        \"name\": \"j24\",\n        \"remain\":2,\n        \"x\":2,\n        \"y\":4,\n      }\n    ],\n    \"d0E\":[\n      \"direction\",\n      {\n        s:0,\n        d:D.EAST,\n      }\n    ],\n    \"d0W\":[\n      \"direction\",\n      {\n        s:0,\n        d:D.WEST,\n      }\n    ],\n    \"d0S\":[\n      \"direction\",\n      {\n        s:0,\n        d:D.SOUTH,\n      }\n    ],\n    \"t0\":[\n      \"tick\",\n      {}\n    ],\n    \"f242\":[\n      \"food\",{\n        x: 2,\n        y: 4,\n        q: 2\n      }\n    ],\n    \"l0\":[\n      \"leave\",{\n        s:0\n      }\n    ],\n    \"l1\":[\n      \"leave\",{\n        s:1\n      }\n    ]\n  };\n  beforeEach(() => {\n    var param = {\n      width: 20,\n      height: 20,\n      version: 1,\n    };\n    game = new Game(map(param).game);\n  });\n  describe(\"#handleCommands\", () => {\n    describe(\"join\", () => {\n      it(\"initializes snake\", () => {\n        console.log(game.getBox({x:2,y:2}));\n        game.handleCommands([cmds.j222]);\n        expect(game.getSnakeSize()).to.be(1);\n        var snake = game.json.snakes[0];\n        expect(snake.head).not.to.be(snake.tail);\n        var box1 = game.getBox({x:2,y:2});\n        expect(box1[1].h).to.be(D.OTHER);\n        expect(box1[1].t).to.be(D.OTHER_T);\n      });\n      it(\"can join many snakes\", () => {\n        var box1 = game.getBox({x:2,y:2});\n        var box2 = game.getBox({x:2,y:4});\n\n        game.handleCommands([cmds.j222]);\n        expect(game.getSnakeSize()).to.be(1);\n        expect(box1[0] === B.SNAKE);\n\n        debugger;\n        game.handleCommands([cmds.j242]);\n        expect(game.getSnakeSize()).to.be(2);\n        expect(box2[0] === B.SNAKE);\n      });\n      it(\"cannot add snake at the same position\", () => {\n        game.handleCommands([cmds.j222]);\n        game.handleCommands([cmds.j222]);\n        expect(game.getSnakeSize()).to.be(1);\n      });\n    });\n    describe(\"direction\", () => {\n      it(\"can change direction\", () => {\n        game.handleCommands([\n          cmds.j222,\n          cmds.d0E,\n        ]);\n        var snake = game.json.snakes[0];\n        var box = game.getBox(snake.head);\n        validateSnake(game,snake);\n        expect(box[1].h == D.EAST);\n      });\n      it(\"cannot go to opposite direction\", () => {\n        game.handleCommands([\n          cmds.j222,\n        ]);\n        var snake = game.json.snakes[0];\n        var box = game.getBox(snake.head);\n        box[1].h = D.WEST;\n        box[1].t = D.EAST;\n        validateSnake(game,snake);\n        game.handleCommands([\n          cmds.d0E,\n        ]);\n        expect(box[1].h).to.be(D.WEST);\n      });\n    });\n    describe(\"move\", () => {\n      it(\"moves at length 1\", () => {\n        game.handleCommands([cmds.j222]);\n        game.handleCommands([cmds.d0E]);\n        var snake = game.json.snakes[0];\n        snake.remain = 0;\n        for(var t=0;t<2;t++){\n          game.handleCommands([cmds.t0]);\n          validateSnake(game,snake);\n          expect(snake.length).to.be(1);\n        }\n      });\n      it(\"moves at length 2\", () => {\n        game.handleCommands([cmds.j222,cmds.d0E]);\n        var snake = game.json.snakes[0];\n        snake.remain = 1;\n        var lengths = [2,2];\n        for(var t=0;t<2;t++){\n          game.handleCommands([cmds.t0]);\n          validateSnake(game,snake);\n          expect(snake.length).to.be(lengths[t]);\n        }\n      });\n      it(\"moves at length 3\", () => {\n        game.handleCommands([cmds.j222,cmds.d0E]);\n        var snake = game.json.snakes[0];\n        snake.remain = 2;\n        var lengths = [2,3,3];\n        for(var t=0;t<3;t++){\n          game.handleCommands([cmds.t0]);\n          validateSnake(game,snake);\n          expect(snake.length).to.be(lengths[t]);\n        }\n      });\n    });\n    describe(\"food\", () => {\n      it(\"can be placed\", () => {\n        game.handleCommands([cmds.f242]);\n        expect(game.getBox({x:2,y:4})).to.eql([\n          B.FOOD,{\n            q:2\n          }\n        ]);\n      });\n      it(\"cannot override block\", () => {\n        game.handleCommands([cmds.j242,cmds.f242]);\n        expect(game.getBox({x:2,y:4})[0]).to.be(B.SNAKE);\n      });\n      it(\"can be eaten\", () => {\n        game.handleCommands([\n          cmds.j222,\n          cmds.d0S,\n        ]);\n        var snake = game.json.snakes[0];\n        snake.remain = 1;\n        game.handleCommands([\n          cmds.f242,\n          cmds.t0,\n          cmds.t0\n        ]);\n        expect(snake.remain).to.be(1);\n        expect(snake.length).to.be(3);\n      });\n    });\n    describe(\"leave\", () => {\n      it(\"a snake leaves\", () => {\n        game.handleCommands([cmds.j222,cmds.l0]);\n        expect(game.getSnakeSize()).to.be(0);\n        expect(game.getBox({x:2,y:2})).to.eql([B.EMPTY,{}]);\n      });\n      it(\"cannot leave nothing\", () => {\n        game.handleCommands([cmds.j222,cmds.l1]);\n        expect(game.getSnakeSize()).to.be(1);\n      });\n      it(\"cannot leave twice\", () => {\n        game.handleCommands([cmds.j222,cmds.l0,cmds.l0]);\n        expect(game.getSnakeSize()).to.be(0);\n      });\n    });\n  });\n});\n","require('./example');\nrequire( './map_test');\nrequire( './game_test');\nrequire( './view_test');\n","const map = require('map');\nconst validators = require('./validators');\ndescribe(\"map\", () => {\n  var input;\n  beforeEach(() => {\n    input = {\n      version: 1,\n      width: 10,\n      height: 10,\n    };\n  });\n  describe.skip(\"validation\", () => {\n    it(\"passes when input is good\", () => {\n      expect(map).withArgs(input).not.to.throwException();\n    });\n    it(\"varifies version\", () => {\n      input.version = -1;\n      expect(map).withArgs(input).to.throwException();\n    });\n    it(\"varifies size\", () => {\n      input.width = 0;\n      expect(map).withArgs(input).to.throwException();\n      input.width = -1;\n      expect(map).withArgs(input).to.throwException();\n      input.width = 3.5;\n      expect(map).withArgs(input).to.throwException();\n      input.width = 1e10;\n      expect(map).withArgs(input).to.throwException();\n\n      input.width = 10;\n\n      input.height = 0;\n      expect(map).withArgs(input).to.throwException();\n      input.height = -1;\n      expect(map).withArgs(input).to.throwException();\n      input.height = 3.5;\n      expect(map).withArgs(input).to.throwException();\n      input.height = 1e10;\n      expect(map).withArgs(input).to.throwException();\n    });\n  });\n  describe(\"game\", () => {\n    it(\"creates valid game\", () => {\n      const {game} = map(input);\n      validators.validateGame(game);\n    });\n  });\n});\n","const {B, D, H} = require('consts');\nconst _ = require('underscore');\nconst V = {\n  validateGame(game){\n    expect(game).to.only.have.keys([\n      'config',//config object for game, such as power duration\n      'grid',// array of boxes on map\n      'height',\n      'seed',// state object for seedrandom\n      'snakes',// array of snakes\n      'tick',// integer representing time since game started\n      'version',// always 1\n      'width',\n    ]);\n\n    V.validateConfig(game.config);\n\n    expect(game.grid).to.be.an('array');\n    expect(game.grid).to.have.length(game.width * game.height);\n    game.grid.forEach((box, index) => {\n      V.validateBox(game, box, {x: index%game.width, y: (index/game.width)|0});\n    });\n\n    V.validateNonNegativeInteger(game.height);\n\n    V.validateSeed(game.seed);\n\n    expect(game.snakes).to.be.an('array');\n    const snakeCount = getSnakeCount();\n    game.snakes.forEach((snake, index) => {\n      V.validateSnake(snake, index, snakeCount[index]);\n    });\n\n    V.validateNonNegativeInteger(game.tick);\n    expect(game.version).to.be(1);\n    V.validateNonNegativeInteger(game.width);\n\n    function validateWithinGrid({x,y}){\n      V.validateNonNegativeInteger(x);\n      expect(x).to.be.below(game.width);\n      V.validateNonNegativeInteger(y);\n      expect(y).to.be.below(game.height);\n    }\n\n\n\n    function getSnakeCount(){\n      const time = new Date();\n      var count = [];\n      game.grid.forEach((b) => {\n        if(b[0] == B.SNAKE){\n          count[b[1].s]|=0;\n          count[b[1].s]+=1;\n        }\n      });\n      console.log(new Date() - time);\n      return count;\n    }\n  },\n  validateNonNegativeInteger(value){\n    expect(value).to.be.within(0,Infinity);\n    expect(value).to.eql(Math.floor(value));\n  },\n  when(v, k, cases){\n    expect(_.keys(cases)).to.contain(v.toString());\n    cases[v](k);\n  },\n  validateKVPair(pair, cases){\n    expect(pair).to.be.an('array');\n    expect(pair).to.have.length(2);\n    helper.when(pair[0],pair[1],cases);\n  },\n  validateEmptyHash(hash){\n    expect(hash).to.eql({});\n  },\n  validateString(string){\n    expect(string).to.be.a('string');\n  },\n  validateConfig(config){\n    expect(config).to.only.have.keys([\n      'startRemain',//the remain value for snake when initialized\n    ]);\n    expect(config.startRemain).to.be.a('number');\n  },\n  validateSnake(game,snake,full){\n    validateKeys();\n    //validatePretty();\n    validateHeadOrTail(snake.head);\n    validateHeadOrTail(snake.tail);\n    validateLength();\n    validateRemain();\n    validateSnakeBody();\n\n\n    function validateKeys(){\n      expect(snake).to.only.have.keys([\n        'age', //number of ticks since joined\n        'head', //position of head\n        'index', //index in game.snakes\n        'length', //cached length of snake\n        'pretty',//every not related to game mechanics\n        'remain',//number of length left to grow\n        'tick',//ticks left for the next move\n        'name',//id of snake\n        'tail',//position of tail\n      ]);\n    }\n    function validatePretty(){\n      expect(snake.pretty).to.only.have.keys([\n        \"name\",\n      ]);\n    }\n    function validateHeadOrTail(head_or_tail){\n      expect(head_or_tail).to.only.have.keys(['x','y']);\n      expect(game.getBox(head_or_tail)).not.to.eql(null);\n    }\n    function validateGame(){\n      expect(game.json.snakes[snake.index]).to.be(snake);\n    }\n    function validateLength(){\n      expect(snake.length).to.be.above(0);\n    }\n    function validateRemain(){\n      expect(snake.remain).to.be.above(-1);\n    }\n    function validateSnakeBody(){\n      let p1=snake.head;\n      let b1=game.getBox(p1);\n      //box belongs to the snake\n      expect(b1[1].s==snake.index);\n      expect(b1[0]==B.SNAKE);\n      if(b1[1].h==D.OTHER){//not moving\n        //expect snake only have one box\n        expect(snake.length).to.be(1);\n        expect(b1[1].t==D.OTHER_T);\n        expect(snake.tail).to.eql(p1);\n        return;\n      }\n      let length=1;\n      let limit=1000;\n      while(!_.isEqual(p1,snake.tail)&&limit-->0){\n        let p2=H.applyDirection(p1,b1[1].t);\n        let b2=game.getBox(p2);\n        //is snake\n        expect(b2[0]==B.SNAKE);\n        //is the snake\n        expect(b2[1].s==snake.index);\n        //connected\n        expect(b2[1].h==b1[1].t ^ D.OP_MASK);\n        //is still going to extend to the tail\n        expect(b1[1].t!=D.OTHER_T);\n        p1 = p2;\n        b1 = b2;\n        length++;\n      }\n      expect(snake.length).to.be(length);\n    }\n  },\n  validateBox(game, box, {x,y}){\n    if(JSON.stringify(box) == \"[0,{}]\"){\n      return;\n    }\n    expect(box).to.be.an('array');\n    expect(_.values(B)).to.contain(box[0]);\n    V.when(box[0], box[1], {\n      [B.EMPTY]: (data) => {//empty box\n        expect(data).to.eql({});\n      },\n      [B.SNAKE]: (data) => {\n        expect(data).to.only.have.keys([\n          'h',//direction toward the head\n          't',//direction toward the tail\n          's',//index of the snake\n        ]);\n        expect(_.values(D)).to.contain(data.h);\n        expect(_.values(D)).to.contain(data.t);\n\n        V.validateNonNegativeInteger(data.s);\n        const snake = game.snakes[data.s];\n        expect(snake).not.to.eql(null);\n\n        expect([\n          D.EAST,\n          D.SOUTH,\n          D.WEST,\n          D.NORTH,\n          D.OTHER,\n        ]).to.contain(data.h);\n        _.isEqual(snake.head, {x,y}) ||\n          validateConnect('h','t');\n\n        expect([\n          D.EAST,\n          D.SOUTH,\n          D.WEST,\n          D.NORTH,\n          D.OTHER_T,\n        ]).to.contain(data.t);\n        _.isEqual(snake.tail, {x,y}) ||\n          validateConnect('t','h');\n\n        function validateConnect(hKey,tKey){\n          if(!D.isValidUserDirection(data[hKey])){\n            return;\n          }\n          const pHead = game._applyDirection({x,y},data[hKey]);\n          validateWithinGrid(pHead);\n\n          const bHead = game.getBox(pHead);\n\n          expect(bHead[0]).to.be(B.SNAKE);\n          const dataHead = bHead[1];\n          expect(dataHead.s).to.be(data.s);\n          const pTailOfHead = game._applyDirection(pHead, dataHead[tKey]);\n          expect(pTailOfHead).to.eql({x,y});\n        }\n      },\n      [B.FOOD]: (data) => {\n        expect(data).to.only.have.keys(['q']);//length it awards the snake\n        expect(data.q).to.be.a('number');\n      },\n      [B.BLOCK]: (data) => {\n      }\n    });\n  },\n  validateSeed(seed){//state of xor128\n    const keys = [\"x\",\"y\",\"z\",\"w\"];\n    expect(seed).to.only.have.keys(keys);\n    keys.forEach((k) => {\n      expect(seed[k]).to.be.a('number');\n    });\n  }\n};\nmodule.exports = V;\n","var View = require('view');\nvar Game = require('game');\nvar map = require('map');\ndescribe(\"View\", () => {\n  describe(\"on game box\", () => {\n    it(\"clears the original content\", () => {\n      var param = {\n        width: 20,\n        height: 20,\n        version: 1,\n      };\n      var game = new Game(map(param).game);\n      var svgEl = $('<svg></svg>')[0];\n      var view = new View(svgEl, game);\n      var box = view.grid[20];\n\n      box.rect(1,1);\n      game.emit('box',{x:0,y:1}, [],[0]);\n\n      expect(box.children.length).to.be(0);\n    });\n  });\n});\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset:utf-8;base64,"}